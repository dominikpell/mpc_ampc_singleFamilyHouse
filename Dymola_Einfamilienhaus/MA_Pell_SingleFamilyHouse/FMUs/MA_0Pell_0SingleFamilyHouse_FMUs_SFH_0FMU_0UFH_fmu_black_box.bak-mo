within MA_Pell_SingleFamilyHouse.FMUs;
model MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box
  "Model with UFH transfer system"
// Model automatically generated by Dymola from FMI model description
public
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  type MA_Pell_SingleFamilyHouse_Components_DHW_DHWProfile = enumeration(
      S                                                                    "Profile S",
      M "Profile M",
      L "Profile L",
      DHWCalc "DHWCalc",
      NoDHW "No DHW");
parameter Real til = 0.26166666666666666;
parameter Real azi1 = 1.57;
parameter Real azi2 = -1.57;
parameter Real lat = 0.9161647777777778;
parameter Real lon = 0.2338951111111111;
parameter Integer year = 1;
parameter MA_Pell_SingleFamilyHouse_Components_DHW_DHWProfile DHWtapping = MA_Pell_SingleFamilyHouse_Components_DHW_DHWProfile.M;
parameter Real DHWProfile_table_1_1_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_1_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_1_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_1_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_1_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_2_1_ = 25200 "Table data for dhw tapping";
parameter Real DHWProfile_table_2_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_2_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_2_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_2_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_3_1_ = 25200.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_3_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_3_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_3_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_3_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_4_1_ = 25321.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_4_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_4_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_4_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_4_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_5_1_ = 25321 "Table data for dhw tapping";
parameter Real DHWProfile_table_5_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_5_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_5_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_5_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_6_1_ = 25500 "Table data for dhw tapping";
parameter Real DHWProfile_table_6_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_6_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_6_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_6_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_7_1_ = 25500.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_7_2_ = 1.4 "Table data for dhw tapping";
parameter Real DHWProfile_table_7_3_ = 0.1 "Table data for dhw tapping";
parameter Real DHWProfile_table_7_4_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_7_5_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_8_1_ = 25902.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_8_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_8_3_ = 0.1 "Table data for dhw tapping";
parameter Real DHWProfile_table_8_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_8_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_9_1_ = 25902 "Table data for dhw tapping";
parameter Real DHWProfile_table_9_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_9_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_9_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_9_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_10_1_ = 27000 "Table data for dhw tapping";
parameter Real DHWProfile_table_10_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_10_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_10_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_10_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_11_1_ = 27000.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_11_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_11_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_11_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_11_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_12_1_ = 27121.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_12_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_12_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_12_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_12_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_13_1_ = 27121 "Table data for dhw tapping";
parameter Real DHWProfile_table_13_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_13_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_13_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_13_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_14_1_ = 28860 "Table data for dhw tapping";
parameter Real DHWProfile_table_14_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_14_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_14_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_14_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_15_1_ = 28860.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_15_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_15_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_15_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_15_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_16_1_ = 28981.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_16_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_16_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_16_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_16_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_17_1_ = 28981 "Table data for dhw tapping";
parameter Real DHWProfile_table_17_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_17_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_17_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_17_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_18_1_ = 29700 "Table data for dhw tapping";
parameter Real DHWProfile_table_18_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_18_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_18_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_18_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_19_1_ = 29700.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_19_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_19_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_19_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_19_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_20_1_ = 29821.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_20_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_20_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_20_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_20_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_21_1_ = 29821 "Table data for dhw tapping";
parameter Real DHWProfile_table_21_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_21_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_21_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_21_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_22_1_ = 30600 "Table data for dhw tapping";
parameter Real DHWProfile_table_22_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_22_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_22_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_22_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_23_1_ = 30600.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_23_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_23_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_23_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_23_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_24_1_ = 30721.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_24_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_24_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_24_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_24_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_25_1_ = 30721 "Table data for dhw tapping";
parameter Real DHWProfile_table_25_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_25_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_25_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_25_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_26_1_ = 31500 "Table data for dhw tapping";
parameter Real DHWProfile_table_26_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_26_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_26_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_26_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_27_1_ = 31500.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_27_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_27_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_27_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_27_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_28_1_ = 31621.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_28_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_28_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_28_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_28_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_29_1_ = 31621 "Table data for dhw tapping";
parameter Real DHWProfile_table_29_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_29_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_29_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_29_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_30_1_ = 32400 "Table data for dhw tapping";
parameter Real DHWProfile_table_30_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_30_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_30_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_30_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_31_1_ = 32400.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_31_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_31_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_31_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_31_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_32_1_ = 32521.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_32_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_32_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_32_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_32_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_33_1_ = 32521 "Table data for dhw tapping";
parameter Real DHWProfile_table_33_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_33_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_33_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_33_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_34_1_ = 34200 "Table data for dhw tapping";
parameter Real DHWProfile_table_34_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_34_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_34_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_34_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_35_1_ = 34200.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_35_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_35_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_35_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_35_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_36_1_ = 34321.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_36_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_36_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_36_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_36_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_37_1_ = 34321 "Table data for dhw tapping";
parameter Real DHWProfile_table_37_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_37_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_37_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_37_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_38_1_ = 37800 "Table data for dhw tapping";
parameter Real DHWProfile_table_38_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_38_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_38_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_38_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_39_1_ = 37800.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_39_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_39_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_39_4_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_39_5_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_40_1_ = 37860.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_40_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_40_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_40_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_40_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_41_1_ = 37860 "Table data for dhw tapping";
parameter Real DHWProfile_table_41_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_41_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_41_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_41_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_42_1_ = 41400 "Table data for dhw tapping";
parameter Real DHWProfile_table_42_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_42_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_42_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_42_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_43_1_ = 41400.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_43_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_43_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_43_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_43_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_44_1_ = 41521.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_44_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_44_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_44_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_44_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_45_1_ = 41521 "Table data for dhw tapping";
parameter Real DHWProfile_table_45_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_45_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_45_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_45_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_46_1_ = 42300 "Table data for dhw tapping";
parameter Real DHWProfile_table_46_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_46_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_46_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_46_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_47_1_ = 42300.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_47_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_47_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_47_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_47_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_48_1_ = 42421.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_48_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_48_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_48_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_48_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_49_1_ = 42421 "Table data for dhw tapping";
parameter Real DHWProfile_table_49_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_49_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_49_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_49_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_50_1_ = 45900 "Table data for dhw tapping";
parameter Real DHWProfile_table_50_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_50_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_50_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_50_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_51_1_ = 45900.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_51_2_ = 0.315 "Table data for dhw tapping";
parameter Real DHWProfile_table_51_3_ = 0.066666667 "Table data for dhw tapping";
parameter Real DHWProfile_table_51_4_ = 55.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_51_5_ = 55.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_52_1_ = 45990.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_52_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_52_3_ = 0.066666667 "Table data for dhw tapping";
parameter Real DHWProfile_table_52_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_52_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_53_1_ = 45990 "Table data for dhw tapping";
parameter Real DHWProfile_table_53_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_53_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_53_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_53_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_54_1_ = 52200 "Table data for dhw tapping";
parameter Real DHWProfile_table_54_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_54_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_54_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_54_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_55_1_ = 52200.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_55_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_55_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_55_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_55_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_56_1_ = 52321.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_56_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_56_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_56_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_56_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_57_1_ = 52321 "Table data for dhw tapping";
parameter Real DHWProfile_table_57_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_57_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_57_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_57_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_58_1_ = 55800 "Table data for dhw tapping";
parameter Real DHWProfile_table_58_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_58_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_58_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_58_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_59_1_ = 55800.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_59_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_59_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_59_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_59_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_60_1_ = 55921.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_60_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_60_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_60_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_60_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_61_1_ = 55921 "Table data for dhw tapping";
parameter Real DHWProfile_table_61_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_61_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_61_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_61_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_62_1_ = 59400 "Table data for dhw tapping";
parameter Real DHWProfile_table_62_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_62_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_62_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_62_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_63_1_ = 59400.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_63_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_63_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_63_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_63_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_64_1_ = 59521.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_64_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_64_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_64_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_64_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_65_1_ = 59521 "Table data for dhw tapping";
parameter Real DHWProfile_table_65_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_65_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_65_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_65_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_66_1_ = 64800 "Table data for dhw tapping";
parameter Real DHWProfile_table_66_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_66_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_66_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_66_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_67_1_ = 64800.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_67_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_67_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_67_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_67_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_68_1_ = 64921.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_68_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_68_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_68_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_68_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_69_1_ = 64921 "Table data for dhw tapping";
parameter Real DHWProfile_table_69_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_69_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_69_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_69_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_70_1_ = 65700 "Table data for dhw tapping";
parameter Real DHWProfile_table_70_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_70_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_70_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_70_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_71_1_ = 65700.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_71_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_71_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_71_4_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_71_5_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_72_1_ = 65760.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_72_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_72_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_72_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_72_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_73_1_ = 65760 "Table data for dhw tapping";
parameter Real DHWProfile_table_73_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_73_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_73_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_73_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_74_1_ = 66600 "Table data for dhw tapping";
parameter Real DHWProfile_table_74_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_74_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_74_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_74_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_75_1_ = 66600.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_75_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_75_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_75_4_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_75_5_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_76_1_ = 66660.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_76_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_76_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_76_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_76_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_77_1_ = 66660 "Table data for dhw tapping";
parameter Real DHWProfile_table_77_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_77_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_77_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_77_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_78_1_ = 68400 "Table data for dhw tapping";
parameter Real DHWProfile_table_78_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_78_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_78_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_78_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_79_1_ = 68400.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_79_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_79_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_79_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_79_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_80_1_ = 68521.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_80_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_80_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_80_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_80_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_81_1_ = 68521 "Table data for dhw tapping";
parameter Real DHWProfile_table_81_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_81_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_81_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_81_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_82_1_ = 73800 "Table data for dhw tapping";
parameter Real DHWProfile_table_82_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_82_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_82_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_82_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_83_1_ = 73800.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_83_2_ = 0.735 "Table data for dhw tapping";
parameter Real DHWProfile_table_83_3_ = 0.066666667 "Table data for dhw tapping";
parameter Real DHWProfile_table_83_4_ = 55.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_83_5_ = 55.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_84_1_ = 74011.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_84_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_84_3_ = 0.066666667 "Table data for dhw tapping";
parameter Real DHWProfile_table_84_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_84_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_85_1_ = 74011 "Table data for dhw tapping";
parameter Real DHWProfile_table_85_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_85_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_85_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_85_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_86_1_ = 76500 "Table data for dhw tapping";
parameter Real DHWProfile_table_86_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_86_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_86_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_86_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_87_1_ = 76500.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_87_2_ = 0.105 "Table data for dhw tapping";
parameter Real DHWProfile_table_87_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_87_4_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_87_5_ = 25.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_88_1_ = 76621.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_88_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_88_3_ = 0.05 "Table data for dhw tapping";
parameter Real DHWProfile_table_88_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_88_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_89_1_ = 76621 "Table data for dhw tapping";
parameter Real DHWProfile_table_89_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_89_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_89_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_89_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_90_1_ = 77400 "Table data for dhw tapping";
parameter Real DHWProfile_table_90_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_90_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_90_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_90_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_91_1_ = 77400.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_91_2_ = 1.4 "Table data for dhw tapping";
parameter Real DHWProfile_table_91_3_ = 0.1 "Table data for dhw tapping";
parameter Real DHWProfile_table_91_4_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_91_5_ = 40.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_92_1_ = 77802.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_92_2_ = 0.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_92_3_ = 0.1 "Table data for dhw tapping";
parameter Real DHWProfile_table_92_4_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_92_5_ = 10.0 "Table data for dhw tapping";
parameter Real DHWProfile_table_93_1_ = 77802 "Table data for dhw tapping";
parameter Real DHWProfile_table_93_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_93_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_93_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_93_5_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_94_1_ = 86400 "Table data for dhw tapping";
parameter Real DHWProfile_table_94_2_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_94_3_ = 0 "Table data for dhw tapping";
parameter Real DHWProfile_table_94_4_ = 10 "Table data for dhw tapping";
parameter Real DHWProfile_table_94_5_ = 10 "Table data for dhw tapping";
parameter Modelica.SIunits.HeatFlowRate DHWProfile_QDHW_flow_nominal = 0.0 "Nominal heat flow rate for selected tapping profile";
parameter Real soc_BAT_Init = 0.3;
parameter Real T_Air_Init = 291.15;
parameter Real T_supply_Init = 298.15;
parameter Real T_supply_HP_Init = 298.15;
parameter Real T_return_Init = 298.15;
parameter Real T_supply_UFH_Init = 298.15;
parameter Real T_return_UFH_Init = 298.15;
parameter Real T_thermalCapacity_top_Init = 298.15;
parameter Real T_thermalCapacity_down_Init = 298.15;
parameter Real T_Roof_Init = 291.15;
parameter Real T_IntWall_Init = 291.15;
parameter Real T_ExtWall_Init = 291.15;
parameter Real T_Floor_Init = 291.15;
parameter Real T_Win_Init = 291.15;
parameter Real t_TES_Init = 303.15;
parameter Real t_DHW_Init = 323.15;
parameter Real T_DHW_1_Init = 323.15;
parameter Real T_DHW_2_Init = 323.15;
parameter Real T_DHW_3_Init = 323.15;
parameter Real T_DHW_4_Init = 323.15;
parameter Real T_HE_DHW_1_Init = 323.15;
parameter Real T_HE_DHW_2_Init = 323.15;
parameter Real T_HE_DHW_3_Init = 323.15;
parameter Real T_HE_DHW_4_Init = 323.15;
parameter Real T_TES_1_Init = 303.15;
parameter Real T_TES_2_Init = 303.15;
parameter Real T_TES_3_Init = 303.15;
parameter Real T_TES_4_Init = 303.15;
parameter Real T_HE_TES_1_Init = 303.15;
parameter Real T_HE_TES_2_Init = 303.15;
parameter Real T_HE_TES_3_Init = 303.15;
parameter Real T_HE_TES_4_Init = 303.15;
parameter Integer nBat = 3 "Number of batteries";
parameter Integer n_mod = 3 "Number of connected PV modules";
parameter Integer IdentifierPV = 1 "defines data for PV module";
parameter Integer IdentifierBAT = 1 "defines data for Battery";
parameter Real TSetDHW = 323.15 "Max temperature for DHW strorage";
parameter Integer tariff = 1;
parameter Real price_el = 0.00034599999999999995 "electricity costs in €/Wh";
parameter Real price_comfort_vio = 1000 "sanctioned price for discomfort in €/K^2";
parameter Real feed_in_revenue_el = 8E-05 "electricity feed in revenue in €/Wh";
parameter Real eta_COP = 0.3 "Max temperature for DHW strorage";
parameter Real Q_HP_max = 5000 "Maximum/Nominal HP power";
parameter Real P_HR_max = 2000 "Maximum/Nominal HR power";
parameter Real eta_HR = 0.97 "HR efficiency";
  parameter Real _PV_Distr_FeedIn_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _PV_Distr_FeedIn_old;
public
  Modelica.Blocks.Interfaces.RealInput PV_Distr_FeedIn(start = _PV_Distr_FeedIn_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _PV_Distr_ChBat_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _PV_Distr_ChBat_old;
public
  Modelica.Blocks.Interfaces.RealInput PV_Distr_ChBat(start = _PV_Distr_ChBat_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _PV_Distr_Use_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _PV_Distr_Use_old;
public
  Modelica.Blocks.Interfaces.RealInput PV_Distr_Use(start = _PV_Distr_Use_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _power_use_BAT_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _power_use_BAT_old;
public
  Modelica.Blocks.Interfaces.RealInput power_use_BAT(start = _power_use_BAT_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _power_to_grid_BAT_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _power_to_grid_BAT_old;
public
  Modelica.Blocks.Interfaces.RealInput power_to_grid_BAT(start = _power_to_grid_BAT_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ch_BAT_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ch_BAT_old;
public
  Modelica.Blocks.Interfaces.RealInput ch_BAT(start = _ch_BAT_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _dem_elec_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _dem_elec_old;
public
  Modelica.Blocks.Interfaces.RealInput dem_elec(start = _dem_elec_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _dem_e_mob_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _dem_e_mob_old;
public
  Modelica.Blocks.Interfaces.RealInput dem_e_mob(start = _dem_e_mob_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _dem_dhw_m_flow_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _dem_dhw_m_flow_old;
public
  Modelica.Blocks.Interfaces.RealInput dem_dhw_m_flow(start = _dem_dhw_m_flow_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _dem_dhw_T_start = 288.15
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _dem_dhw_T_old;
public
  Modelica.Blocks.Interfaces.RealInput dem_dhw_T(nominal = 300.0, min = 0.0, start = _dem_dhw_T_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _x_HP_heat_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _x_HP_heat_old;
public
  Modelica.Blocks.Interfaces.RealInput x_HP_heat(start = _x_HP_heat_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _x_HP_cool_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _x_HP_cool_old;
public
  Modelica.Blocks.Interfaces.RealInput x_HP_cool(start = _x_HP_cool_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _T_supply_UFH_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _T_supply_UFH_old;
public
  Modelica.Blocks.Interfaces.RealInput T_supply_UFH(start = _T_supply_UFH_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _T_supply_HP_heat_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _T_supply_HP_heat_old;
public
  Modelica.Blocks.Interfaces.RealInput T_supply_HP_heat(start = _T_supply_HP_heat_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _T_supply_cool_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _T_supply_cool_old;
public
  Modelica.Blocks.Interfaces.RealInput T_supply_cool(start = _T_supply_cool_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _heat_rod_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _heat_rod_old;
public
  Modelica.Blocks.Interfaces.RealInput heat_rod(start = _heat_rod_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_gains_human_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_gains_human_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_gains_human(min = 0.0, max = 1.0, start = _ts_gains_human_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_gains_dev_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_gains_dev_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_gains_dev(min = 0.0, max = 1.0, start = _ts_gains_dev_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_gains_light_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_gains_light_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_gains_light(min = 0.0, max = 1.0, start = _ts_gains_light_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ch_DHW_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ch_DHW_old;
public
  Modelica.Blocks.Interfaces.RealInput ch_DHW(start = _ch_DHW_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ch_TES_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ch_TES_old;
public
  Modelica.Blocks.Interfaces.RealInput ch_TES(start = _ch_TES_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _x_HP_on_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _x_HP_on_old;
public
  Modelica.Blocks.Interfaces.RealInput x_HP_on(start = _x_HP_on_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _dch_TES_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _dch_TES_old;
public
  Modelica.Blocks.Interfaces.RealInput dch_TES(start = _dch_TES_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _t_TES_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _t_TES_old;
public
  Modelica.Blocks.Interfaces.RealInput t_TES(start = _t_TES_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _t_DHW_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _t_DHW_old;
public
  Modelica.Blocks.Interfaces.RealInput t_DHW(start = _t_DHW_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_T_inside_max_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_T_inside_max_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_T_inside_max(start = _ts_T_inside_max_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_T_inside_min_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_T_inside_min_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_T_inside_min(start = _ts_T_inside_min_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_T_air_start = 293.15
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_T_air_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_T_air(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 0.0, start = _ts_T_air_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_sol_rad_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_sol_rad_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_sol_rad(start = _ts_sol_rad_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_win_spe_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_win_spe_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_win_spe(min = 0.0, start = _ts_win_spe_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  parameter Real _ts_price_el_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _ts_price_el_old;
public
  Modelica.Blocks.Interfaces.RealInput ts_price_el(start = _ts_price_el_start)
  annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_t_DHW "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_t_TES "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_ch_TES
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_dch_TES
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_ch_DHW
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_dch_DHW
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_DHW_4 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_DHW_3 "Temperature of uppest layer of buffer storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_DHW_2 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_DHW_1 "Temperature of uppest layer of buffer storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_TES_4 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_TES_3 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_TES_2 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_TES_1 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_DHW_4 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_DHW_3 "Temperature of uppest layer of buffer storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_DHW_2 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_DHW_1 "Temperature of uppest layer of buffer storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_TES_4 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_TES_3 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_TES_2 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDist_T_HE_TES_1 "Temperature of uppest layer of DHW storage"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_x_HP_on
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_power_HP
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_heat_rod
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_power_rod
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_supply_HP_heat(nominal = 300.0, min = 1.0, max = 10000.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_supply_HP
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_supply(min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_supply_heat
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_return_heat(nominal = 300.0, min = 1.0, max = 10000.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_T_return
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsGen_heat_HP "Value of Real output"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_Air(nominal = 300.0, min = 1.0, max = 10000.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_t_rad(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_dT_vio
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_Win(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_ExtWall(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_IntWall(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_Floor(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_T_Roof(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_QDHW_flow "Value of Real output"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsDem_QIntGains_flow_1_ "Value of Real output"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_T_supply_UFH(min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_T_return_UFH(min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_Q_conv_UFH
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_Q_rad_UFH
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_T_panel_heating1(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_T_thermalCapacity_top(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_T_thermalCapacity_down(nominal = 300.0, min = 0.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_mFlow_1_(nominal = 0.21, min = 0.0, max = 100000.0) "mass flow to thermal zones"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsTra_TZone_1_(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature") "Indoor air temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_ts_power_PV
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_use_PV
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_to_grid_PV
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_to_BAT_PV
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_use_BAT
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_to_grid_BAT
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_to_BAT_from_grid
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_ch_BAT
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_dch_BAT
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_soc_BAT
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_to_grid
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_from_grid
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_res_elec
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput outputs_outputsElec_power_PV "Connector of Real output signal"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_m_flowDHW "Volume flow rate demand of dhw based on input scenario [litre/hour]"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_TDemandDHW "Demand temperature of DHW tap"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_intGains_1_
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_intGains_2_
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_intGains_3_
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_TSoil "Soil temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_ElectricityDemand
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_EVDemand
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_HDifHor(unit = "W/m2") "Diffuse horizontal solar irradiation"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_HDirNor(unit = "W/m2") "Direct normal solar irradiation"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_HGloHor(unit = "W/m2") "Connector of Real output signal"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_HHorIR(unit = "W/m2", nominal = 100.0, min = 0.0) "Horizontal infrared irradiation"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_TBlaSky(unit = "K", displayUnit = "degC") "Black-body sky temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_TDewPoi(unit = "K", displayUnit = "degC") "Dew point temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_TDryBul(unit = "K", displayUnit = "degC") "Dry bulb temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_TWetBul(unit = "K", min = 0.0) "Wet bulb temperature"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_ceiHei(unit = "m") "Cloud cover ceiling height"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_cloTim(unit = "s") "Model time"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_lat(unit = "rad", displayUnit = "deg") "Latitude of the location"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_lon(unit = "rad", displayUnit = "deg") "Longitude of the location"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_nOpa(min = 0.0, max = 1.0) "Opaque sky cover"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_nTot "Total sky cover"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_pAtm(unit = "Pa") "Atmospheric pressure"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_relHum(min = 0.0, max = 1.0) "Relative humidity"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_solAlt(unit = "rad", displayUnit = "deg") "Solar altitude angle"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_solDec(unit = "rad", displayUnit = "deg") "Solar declination angle"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_solHouAng(unit = "rad", displayUnit = "deg") "Solar hour angle"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_solTim(unit = "s", displayUnit = "s") "Solar time"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_solZen(unit = "rad", displayUnit = "deg") "Zenith angle"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_winDir(unit = "rad") "Wind direction"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_weaBus_winSpe(unit = "m/s") "Wind speed"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_T_supply_UFH
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_ts_T_inside_max
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_ts_T_inside_min
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_HP_on
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_hr_rel(min = 0.0, max = 1.0)
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_ch_DHW
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_ch_TES
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.BooleanOutput MPC_Interface_mode_HP
  annotation (Placement(transformation(extent={{80,-80},{120,-40}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_dch_TES
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_t_DHW
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_t_TES
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput MPC_Interface_T_supply_HP "Connector of Real output signal"
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput costs_tot
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput costs_vio
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput costs_elec
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput rev_elec
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput costs_DHW_err
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput CPUtime(unit = "s")
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
  Modelica.Blocks.Interfaces.RealOutput EventCounter
  annotation (Placement(transformation(extent={{80,-20},{120,20}})));
public
  parameter String fmi_instanceName="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter Boolean fmi_InputTime=false
  "Time point of input used when calling doStep."
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"),choices(choice= false "StepEnd", choice= true "StepStart"));
  parameter Boolean fmi_UsePreOnInputSignals=true
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"));
  parameter Real fmi_StartTime = 0.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_StopTime = 86400.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_NumberOfSteps = 500
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_CommunicationStepSize=(fmi_StopTime-fmi_StartTime)/fmi_NumberOfSteps
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Integer stepSizeScaleFactor = 1 "Number of doSteps called between two CommunicationStepSize"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Boolean fmi_forceShutDownAtStopTime=false
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_rTol=1e-6 "relative tolerance for the internal solver of the fmu"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter String fmi_resourceLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/resources")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
  fmi_Functions.fmiModel fmi;
  Boolean fmi_exitInit(start=false,fixed=true);
  Boolean fmi_flip(start=false,fixed=true);
  parameter Real fmi_rdum(start=0,fixed=false);
  parameter Integer fmi_idum(start=0,fixed=false);
  Boolean fmi_StepOK;
  parameter Real zeroOffset = 0;
  parameter Real myTimeStart(fixed=false);
  record 'Internal '
    Real outputs_outputsDist_t_DHW;
    Real outputs_outputsDist_t_TES;
    Real outputs_outputsDist_ch_TES;
    Real outputs_outputsDist_dch_TES;
    Real outputs_outputsDist_ch_DHW;
    Real outputs_outputsDist_dch_DHW;
    Real outputs_outputsDist_T_DHW_4;
    Real outputs_outputsDist_T_DHW_3;
    Real outputs_outputsDist_T_DHW_2;
    Real outputs_outputsDist_T_DHW_1;
    Real outputs_outputsDist_T_TES_4;
    Real outputs_outputsDist_T_TES_3;
    Real outputs_outputsDist_T_TES_2;
    Real outputs_outputsDist_T_TES_1;
    Real outputs_outputsDist_T_HE_DHW_4;
    Real outputs_outputsDist_T_HE_DHW_3;
    Real outputs_outputsDist_T_HE_DHW_2;
    Real outputs_outputsDist_T_HE_DHW_1;
    Real outputs_outputsDist_T_HE_TES_4;
    Real outputs_outputsDist_T_HE_TES_3;
    Real outputs_outputsDist_T_HE_TES_2;
    Real outputs_outputsDist_T_HE_TES_1;
    Real outputs_outputsGen_x_HP_on;
    Real outputs_outputsGen_power_HP;
    Real outputs_outputsGen_heat_rod;
    Real outputs_outputsGen_power_rod;
    Real outputs_outputsGen_T_supply_HP_heat;
    Real outputs_outputsGen_T_supply_HP;
    Real outputs_outputsGen_T_supply;
    Real outputs_outputsGen_T_supply_heat;
    Real outputs_outputsGen_T_return_heat;
    Real outputs_outputsGen_T_return;
    Real outputs_outputsGen_heat_HP;
    Real outputs_outputsDem_T_Air;
    Real outputs_outputsDem_t_rad;
    Real outputs_outputsDem_dT_vio;
    Real outputs_outputsDem_T_Win;
    Real outputs_outputsDem_T_ExtWall;
    Real outputs_outputsDem_T_IntWall;
    Real outputs_outputsDem_T_Floor;
    Real outputs_outputsDem_T_Roof;
    Real outputs_outputsDem_QDHW_flow;
    Real outputs_outputsDem_QIntGains_flow_1_;
    Real outputs_outputsTra_T_supply_UFH;
    Real outputs_outputsTra_T_return_UFH;
    Real outputs_outputsTra_Q_conv_UFH;
    Real outputs_outputsTra_Q_rad_UFH;
    Real outputs_outputsTra_T_panel_heating1;
    Real outputs_outputsTra_T_thermalCapacity_top;
    Real outputs_outputsTra_T_thermalCapacity_down;
    Real outputs_outputsTra_mFlow_1_;
    Real outputs_outputsTra_TZone_1_;
    Real outputs_outputsElec_ts_power_PV;
    Real outputs_outputsElec_power_use_PV;
    Real outputs_outputsElec_power_to_grid_PV;
    Real outputs_outputsElec_power_to_BAT_PV;
    Real outputs_outputsElec_power_use_BAT;
    Real outputs_outputsElec_power_to_grid_BAT;
    Real outputs_outputsElec_power_to_BAT_from_grid;
    Real outputs_outputsElec_ch_BAT;
    Real outputs_outputsElec_dch_BAT;
    Real outputs_outputsElec_soc_BAT;
    Real outputs_outputsElec_power_to_grid;
    Real outputs_outputsElec_power_from_grid;
    Real outputs_outputsElec_res_elec;
    Real outputs_outputsElec_power_PV;
    Real MPC_Interface_m_flowDHW;
    Real MPC_Interface_TDemandDHW;
    Real MPC_Interface_intGains_1_;
    Real MPC_Interface_intGains_2_;
    Real MPC_Interface_intGains_3_;
    Real MPC_Interface_TSoil;
    Real MPC_Interface_ElectricityDemand;
    Real MPC_Interface_EVDemand;
    Real MPC_Interface_weaBus_HDifHor;
    Real MPC_Interface_weaBus_HDirNor;
    Real MPC_Interface_weaBus_HGloHor;
    Real MPC_Interface_weaBus_HHorIR;
    Real MPC_Interface_weaBus_TBlaSky;
    Real MPC_Interface_weaBus_TDewPoi;
    Real MPC_Interface_weaBus_TDryBul;
    Real MPC_Interface_weaBus_TWetBul;
    Real MPC_Interface_weaBus_ceiHei;
    Real MPC_Interface_weaBus_cloTim;
    Real MPC_Interface_weaBus_lat;
    Real MPC_Interface_weaBus_lon;
    Real MPC_Interface_weaBus_nOpa;
    Real MPC_Interface_weaBus_nTot;
    Real MPC_Interface_weaBus_pAtm;
    Real MPC_Interface_weaBus_relHum;
    Real MPC_Interface_weaBus_solAlt;
    Real MPC_Interface_weaBus_solDec;
    Real MPC_Interface_weaBus_solHouAng;
    Real MPC_Interface_weaBus_solTim;
    Real MPC_Interface_weaBus_solZen;
    Real MPC_Interface_weaBus_winDir;
    Real MPC_Interface_weaBus_winSpe;
    Real MPC_Interface_T_supply_UFH;
    Real MPC_Interface_ts_T_inside_max;
    Real MPC_Interface_ts_T_inside_min;
    Real MPC_Interface_HP_on;
    Real MPC_Interface_hr_rel;
    Real MPC_Interface_ch_DHW;
    Real MPC_Interface_ch_TES;
    Boolean MPC_Interface_mode_HP;
    Real MPC_Interface_dch_TES;
    Real MPC_Interface_t_DHW;
    Real MPC_Interface_t_TES;
    Real MPC_Interface_T_supply_HP;
    Real costs_tot;
    Real costs_vio;
    Real costs_elec;
    Real rev_elec;
    Real costs_DHW_err;
    Real CPUtime;
    Real EventCounter;
  end 'Internal ';
  'Internal ' internal;
package fmi_Functions
    class fmiModel
      extends ExternalObject;
      function constructor "Initialize FMI model"
        extends Modelica.Icons.Function;
        input String instanceName;
        input Boolean loggingOn;
        input String resourceLocation;
        output fmiModel fmi;
        external"C" fmi = MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiInstantiateModel2(instanceName, loggingOn, resourceLocation)
        annotation(Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Instantiate_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Instantiate_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777Logger(fmi2ComponentEnvironment componentEnvironment, fmi2String instanceName, fmi2Status status,
  fmi2String category, fmi2String message, ...) {
  char msg[4096];
  char buf[4096];
  va_list ap;
  int len;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len < 4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmi2Fatal:
      ModelicaMessage(\"[fmi2Fatal]: \");
      break;
    case fmi2Error:
      ModelicaMessage(\"[fmi2Error]: \");
      break;
    case fmi2Discard:
      ModelicaMessage(\"[fmi2Discard]: \");
      break;
    case fmi2Warning:
      ModelicaMessage(\"[fmi2Warning]: \");
      break;
    case fmi2OK:
      ModelicaMessage(\"[fmi2OK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiInstantiateModel2(const char*instanceName, fmi2Boolean loggingOn, fmi2String resourceLocation) {
  static fmi2CallbackFunctions funcs = {&MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777Logger, &calloc, &free, NULL, NULL};
  struct dy_fmi2Extended* res;
  res = calloc(1, sizeof(struct dy_fmi2Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH.dll) failed!\");
      return 0;
    }
    if (!(res->dyFmiInstantiate=(fmi2InstantiateFunc)GetProcAddress(res->hInst,\"fmi2Instantiate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Instantiate!\");
      return 0;
    }
    if (!(res->dyFmiFreeInstance=(fmi2FreeInstanceFunc)GetProcAddress(res->hInst,\"fmi2FreeInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeInstance!\");
      return 0;
    }
    if (!(res->dyFmiSetupExperiment=(fmi2SetupExperimentFunc)GetProcAddress(res->hInst,\"fmi2SetupExperiment\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetupExperiment!\");
      return 0;
    }
    if (!(res->dyFmiEnterInitializationMode=(fmi2EnterInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2EnterInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiExitInitializationMode=(fmi2ExitInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2ExitInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2ExitInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmi2TerminateFunc)GetProcAddress(res->hInst,\"fmi2Terminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Terminate!\");
      return 0;
    }
    if (!(res->dyFmiReset=(fmi2ResetFunc)GetProcAddress(res->hInst,\"fmi2Reset\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Reset!\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmi2SetRealFunc)GetProcAddress(res->hInst,\"fmi2SetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmi2GetRealFunc)GetProcAddress(res->hInst,\"fmi2GetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmi2SetIntegerFunc)GetProcAddress(res->hInst,\"fmi2SetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmi2GetIntegerFunc)GetProcAddress(res->hInst,\"fmi2GetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmi2SetBooleanFunc)GetProcAddress(res->hInst,\"fmi2SetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmi2GetBooleanFunc)GetProcAddress(res->hInst,\"fmi2GetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmi2SetDebugLoggingFunc)GetProcAddress(res->hInst,\"fmi2SetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetDebugLogging!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmi2SetStringFunc)GetProcAddress(res->hInst,\"fmi2SetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmi2GetStringFunc)GetProcAddress(res->hInst,\"fmi2GetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetString!\");
      return 0;
    }
    if(!(res->dyFmiDoStep=(fmi2DoStepFunc)GetProcAddress(res->hInst,\"fmi2DoStep\"))){
      ModelicaError(\"GetProcAddress failed for fmi2DoStep!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiDoStep\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiGetBooleanStatus=(fmi2GetBooleanStatusFunc)GetProcAddress(res->hInst,\"fmi2GetBooleanStatus\"))){
      ModelicaError(\"GetProcAddress failed for fmi2GetBooleanStatus!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiGetBooleanStatus\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if (!(res->dyFmiGetDirectionalDerivative=(fmi2GetDirectionalDerivativeFunc)GetProcAddress(res->hInst,\"fmi2GetDirectionalDerivative\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDirectionalDerivative!\");
      return 0;
    }
    if (!(res->dyFmiGetFMUstate=(fmi2GetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2GetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSetFMUstate=(fmi2SetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiFreeFMUstate=(fmi2FreeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2FreeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSerializedFMUstateSize=(fmi2SerializedFMUstateSizeFunc)GetProcAddress(res->hInst,\"fmi2SerializedFMUstateSize\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializedFMUstateSize!\");
      return 0;
    }
    if (!(res->dyFmiSerializeFMUstate=(fmi2SerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiDeSerializeFMUstate=(fmi2DeSerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2DeSerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2DeSerializeFMUstate!\");
      return 0;
    }
    res->m=res->dyFmiInstantiate(instanceName, fmi2CoSimulation, \"{3728e6d1-8ff0-4244-9ce0-35cf16b80777}\",resourceLocation, &funcs, fmi2False, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;res->discreteInputChanged=1;res->currentMode=dyfmi2InstantiationMode;res->dyLastStepTime=0;res->dyFMUstate=NULL;}
  }
  return res;
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
      end constructor;

      function destructor "Release storage of FMI model"
        extends Modelica.Icons.Function;
        input fmiModel fmi;
        external"C"
                   MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiFreeModelInstance2(fmi);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Free_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Free_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiFreeModelInstance2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    if(a->dyFMUstate)
    a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
    /*a->dyFmiSetDebugLogging(a->m,fmi2True,0,NULL);*/
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
      end destructor;
    end fmiModel;

    function fmiDoStep
    input fmiModel fmi;
    input Real currentTime;
    input Real stepSize;
    input Real preAvailable;
    output Boolean stepOK;
    output Real postAvailable=preAvailable;
    external"C" stepOK= MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDoStep2(fmi, currentTime, stepSize);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_DoStep_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_DoStep_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDoStep2(void*m, double currentTime, double stepSize) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  fmi2Boolean value=fmi2False;
  if (a) {
    status=a->dyFmiDoStep(a->m, currentTime, stepSize, fmi2True);
    if(status==fmi2Discard){
      status = a->dyFmiGetBooleanStatus(a->m, fmi2Terminated, &value);
      if(value==fmi2True){
        terminate(\"Terminate signaled by the FMU\");
      }
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"DoStep failed\");
  return 1.0;
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiDoStep;

    function fmiReset
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiReset2(fmi);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Reset_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_Reset_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiReset2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiReset(a->m);
    a->currentMode=dyfmi2InstantiationMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiReset failed\");
    return 1.0;
  }
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiReset;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetReal_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetReal;

    function fmiGetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real preAvailable;
      output Real vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetReal_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetRealwf;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      external"C"
                 MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetReal_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C"
                 MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetReal_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealwf;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetInteger_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetInteger;

    function fmiGetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Integer vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetInteger_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetInteger_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetIntegerwf;

    function fmiSetInteger
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetInteger_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed in SetInteger\");
      for( i = 0; i < nrefs; ++i){
        if(oldVals[i] != vals[i]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiSetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetInteger2wf(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetIntegerwf_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetIntegerwf_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetInteger2wf(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetIntegerwf;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetBoolean_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetBoolean;

    function fmiGetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Boolean vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetBoolean_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetBooleanwf;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetBoolean_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals, int* dummy, int* oldVals) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(oldVals));
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed in SetBoolean\");
      for(j=nr-1;j>=0;j--){
        oldVals[j]=((fmi2Boolean*)(oldVals))[j];
        if(oldVals[j] != dummy[j]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetString
      input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetString_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetString_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetString2(void*m, const int*refs, size_t nrefs,const fmi2String vals[]) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    a->discreteInputChanged = fmi2True;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetString failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiSetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
    protected
      Boolean dummy[size(refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetBoolean2wf(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetBooleanwf_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_SetBooleanwf_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSetBoolean2wf(void*m, const int* refs, size_t nr, const int* vals, int* dummy) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBooleanwf;

    function fmiGetDirectionalDerivative
      input fmiModel fmi;
      input Integer z_refs[:];
      input Integer v_refs[:];
      input Real dv[size(v_refs, 1)];
      output Real dz[size(z_refs, 1)];
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetDirectionalDerivative2(
        fmi,
        z_refs,
        size(z_refs, 1),
        v_refs,
        size(v_refs, 1),
        dv,
        dz);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetDirectionalDerivative2_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetDirectionalDerivative2_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_GetDirectionalDerivative2(void*m, const int* zref, size_t nzr, const int* vrefs, size_t nvr, const double *dv, double *dz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDirectionalDerivative(a->m, zref, nzr, vrefs, nvr, dv, dz);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetDirectionalDerivative failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiGetDirectionalDerivative;

    function GetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1]);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable, LateInline=true);
    end GetRealVariable;

    function derGetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable;

    function fmiSaveFMUState
      input fmiModel fmi;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSaveFMUState2(fmi);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSaveFMUState_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSaveFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSaveFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiSaveFMUState;

    function fmiRestoreFMUState
      input fmiModel fmi;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiRestoreFMUState2(fmi);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiRestoreFMUState_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiRestoreFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiRestoreFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiRestoreFMUState;

    function fmiSerializeFMUstate
      input fmiModel fmi;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSerializeFMUstate_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
    status = a->dyFmiSerializedFMUstateSize(a->m, a->dyFMUstate, &a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializedFMUstateSize failed\");
    if( a->dySerializeFMUstate) free(a->dySerializeFMUstate); a->dySerializeFMUstate = NULL;
    a->dySerializeFMUstate = malloc(a->dyFMUStateSize);
    if(!a->dySerializeFMUstate)  ModelicaError(\"malloc call to allocate SerializeFMUstate failed\");
    status = a->dyFmiSerializeFMUstate(a->m, a->dyFMUstate, a->dySerializeFMUstate, a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializeFMUstate failed\");
  }
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiSerializeFMUstate;

    function fmiDeSerializeFMUstate
      input fmiModel fmi;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDeSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDeSerializeFMUstate_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDeSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiDeSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(!a->dySerializeFMUstate) ModelicaError(\"serializedFmuState is not allocated!!!\");
    if(a->dyFMUstate){
      a->dyFmiFreeFMUstate(a->m, a->dyFMUstate);
      a->dyFMUstate = NULL;    }
    status = a->dyFmiDeSerializeFMUstate(a->m, a->dySerializeFMUstate, a->dyFMUStateSize, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiDeSerializeFMUstate failed\");
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
  }
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiDeSerializeFMUstate;

    function fmiEnterSlaveInitializationMode
      input fmiModel fmi;
      input Real relativeTolerance;
      input Real tStart;
      input Boolean forceShutDownAtTStop;
      input Real tStop;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiEnterSlaveInitializationMode2(fmi, relativeTolerance, tStart, forceShutDownAtTStop, tStop);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiEnterSlaveInitializationMode_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiEnterSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiEnterSlaveInitializationMode2(void*m, double relativeTolerance, double tStart, int forceShutDownAtTStop, double tStop) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode==dyfmi2InstantiationMode){
      status=a->dyFmiSetupExperiment(a->m, fmi2True, relativeTolerance, tStart, forceShutDownAtTStop, tStop);
      status=a->dyFmiEnterInitializationMode(a->m);
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
      a->currentMode=dyfmi2InitializationMode;
    }else{
      status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"InitializeSlave failed\");
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiEnterSlaveInitializationMode;

    function fmiExitSlaveInitializationMode
      input fmiModel fmi;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiExitSlaveInitializationMode2(fmi);
      annotation (Header="
#ifndef MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiExitSlaveInitializationMode_C
#define MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiExitSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH37286180424490351680777_fmiExitSlaveInitializationMode2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiExitInitializationMode(a->m);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
    a->currentMode = dyfmi2EventMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiExitModelInitialization failed!\");
  return;
}
#endif", Library="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH", LibraryDirectory="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/binaries", __Dymola_CriticalRegion="MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH");
    end fmiExitSlaveInitializationMode;
end fmi_Functions;
initial equation
equation
  when initial() then
    fmi = fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_resourceLocation);
  end when;
initial algorithm
  fmi_Functions.fmiSetReal(fmi, {16777216, 16777217, 16777218, 16777219, 16777220, 16777223, 16777224, 16777225, 16777226, 16777227, 16777228, 16777229, 16777230, 16777231, 16777232, 16777233, 16777234, 16777235, 16777236, 16777237, 16777238, 16777239, 16777240, 16777241, 16777242, 16777243, 16777244, 16777245, 16777246, 16777247, 16777248, 16777249, 16777250, 16777251, 16777252, 16777253, 16777254, 16777255, 16777256, 16777257, 16777258, 16777259, 16777260, 16777261, 16777262, 16777263, 16777264, 16777265, 16777266, 16777267, 16777268, 16777269, 16777270, 16777271, 16777272, 16777273, 16777274, 16777275, 16777276, 16777277, 16777278, 16777279, 16777280, 16777281, 16777282, 16777283, 16777284, 16777285, 16777286, 16777287, 16777288, 16777289, 16777290, 16777291, 16777292, 16777293, 16777294, 16777295, 16777296, 16777297, 16777298, 16777299, 16777300, 16777301, 16777302, 16777303, 16777304, 16777305, 16777306, 16777307, 16777308, 16777309, 16777310, 16777311, 16777312, 16777313, 16777314, 16777315, 16777316, 16777317}, {til, azi1, azi2, lat, lon, DHWProfile_table_1_1_, DHWProfile_table_1_2_, DHWProfile_table_1_3_, DHWProfile_table_1_4_, DHWProfile_table_1_5_, DHWProfile_table_2_1_, DHWProfile_table_2_2_, DHWProfile_table_2_3_, DHWProfile_table_2_4_, DHWProfile_table_2_5_, DHWProfile_table_3_1_, DHWProfile_table_3_2_, DHWProfile_table_3_3_, DHWProfile_table_3_4_, DHWProfile_table_3_5_, DHWProfile_table_4_1_, DHWProfile_table_4_2_, DHWProfile_table_4_3_, DHWProfile_table_4_4_, DHWProfile_table_4_5_, DHWProfile_table_5_1_, DHWProfile_table_5_2_, DHWProfile_table_5_3_, DHWProfile_table_5_4_, DHWProfile_table_5_5_, DHWProfile_table_6_1_, DHWProfile_table_6_2_, DHWProfile_table_6_3_, DHWProfile_table_6_4_, DHWProfile_table_6_5_, DHWProfile_table_7_1_, DHWProfile_table_7_2_, DHWProfile_table_7_3_, DHWProfile_table_7_4_, DHWProfile_table_7_5_, DHWProfile_table_8_1_, DHWProfile_table_8_2_, DHWProfile_table_8_3_, DHWProfile_table_8_4_, DHWProfile_table_8_5_, DHWProfile_table_9_1_, DHWProfile_table_9_2_, DHWProfile_table_9_3_, DHWProfile_table_9_4_, DHWProfile_table_9_5_, DHWProfile_table_10_1_, DHWProfile_table_10_2_, DHWProfile_table_10_3_, DHWProfile_table_10_4_, DHWProfile_table_10_5_, DHWProfile_table_11_1_, DHWProfile_table_11_2_, DHWProfile_table_11_3_, DHWProfile_table_11_4_, DHWProfile_table_11_5_, DHWProfile_table_12_1_, DHWProfile_table_12_2_, DHWProfile_table_12_3_, DHWProfile_table_12_4_, DHWProfile_table_12_5_, DHWProfile_table_13_1_, DHWProfile_table_13_2_, DHWProfile_table_13_3_, DHWProfile_table_13_4_, DHWProfile_table_13_5_, DHWProfile_table_14_1_, DHWProfile_table_14_2_, DHWProfile_table_14_3_, DHWProfile_table_14_4_, DHWProfile_table_14_5_, DHWProfile_table_15_1_, DHWProfile_table_15_2_, DHWProfile_table_15_3_, DHWProfile_table_15_4_, DHWProfile_table_15_5_, DHWProfile_table_16_1_, DHWProfile_table_16_2_, DHWProfile_table_16_3_, DHWProfile_table_16_4_, DHWProfile_table_16_5_, DHWProfile_table_17_1_, DHWProfile_table_17_2_, DHWProfile_table_17_3_, DHWProfile_table_17_4_, DHWProfile_table_17_5_, DHWProfile_table_18_1_, DHWProfile_table_18_2_, DHWProfile_table_18_3_, DHWProfile_table_18_4_, DHWProfile_table_18_5_, DHWProfile_table_19_1_, DHWProfile_table_19_2_, DHWProfile_table_19_3_, DHWProfile_table_19_4_, DHWProfile_table_19_5_});
  fmi_Functions.fmiSetReal(fmi, {16777318, 16777319, 16777320, 16777321, 16777322, 16777323, 16777324, 16777325, 16777326, 16777327, 16777328, 16777329, 16777330, 16777331, 16777332, 16777333, 16777334, 16777335, 16777336, 16777337, 16777338, 16777339, 16777340, 16777341, 16777342, 16777343, 16777344, 16777345, 16777346, 16777347, 16777348, 16777349, 16777350, 16777351, 16777352, 16777353, 16777354, 16777355, 16777356, 16777357, 16777358, 16777359, 16777360, 16777361, 16777362, 16777363, 16777364, 16777365, 16777366, 16777367, 16777368, 16777369, 16777370, 16777371, 16777372, 16777373, 16777374, 16777375, 16777376, 16777377, 16777378, 16777379, 16777380, 16777381, 16777382, 16777383, 16777384, 16777385, 16777386, 16777387, 16777388, 16777389, 16777390, 16777391, 16777392, 16777393, 16777394, 16777395, 16777396, 16777397, 16777398, 16777399, 16777400, 16777401, 16777402, 16777403, 16777404, 16777405, 16777406, 16777407, 16777408, 16777409, 16777410, 16777411, 16777412, 16777413, 16777414, 16777415, 16777416, 16777417}, {DHWProfile_table_20_1_, DHWProfile_table_20_2_, DHWProfile_table_20_3_, DHWProfile_table_20_4_, DHWProfile_table_20_5_, DHWProfile_table_21_1_, DHWProfile_table_21_2_, DHWProfile_table_21_3_, DHWProfile_table_21_4_, DHWProfile_table_21_5_, DHWProfile_table_22_1_, DHWProfile_table_22_2_, DHWProfile_table_22_3_, DHWProfile_table_22_4_, DHWProfile_table_22_5_, DHWProfile_table_23_1_, DHWProfile_table_23_2_, DHWProfile_table_23_3_, DHWProfile_table_23_4_, DHWProfile_table_23_5_, DHWProfile_table_24_1_, DHWProfile_table_24_2_, DHWProfile_table_24_3_, DHWProfile_table_24_4_, DHWProfile_table_24_5_, DHWProfile_table_25_1_, DHWProfile_table_25_2_, DHWProfile_table_25_3_, DHWProfile_table_25_4_, DHWProfile_table_25_5_, DHWProfile_table_26_1_, DHWProfile_table_26_2_, DHWProfile_table_26_3_, DHWProfile_table_26_4_, DHWProfile_table_26_5_, DHWProfile_table_27_1_, DHWProfile_table_27_2_, DHWProfile_table_27_3_, DHWProfile_table_27_4_, DHWProfile_table_27_5_, DHWProfile_table_28_1_, DHWProfile_table_28_2_, DHWProfile_table_28_3_, DHWProfile_table_28_4_, DHWProfile_table_28_5_, DHWProfile_table_29_1_, DHWProfile_table_29_2_, DHWProfile_table_29_3_, DHWProfile_table_29_4_, DHWProfile_table_29_5_, DHWProfile_table_30_1_, DHWProfile_table_30_2_, DHWProfile_table_30_3_, DHWProfile_table_30_4_, DHWProfile_table_30_5_, DHWProfile_table_31_1_, DHWProfile_table_31_2_, DHWProfile_table_31_3_, DHWProfile_table_31_4_, DHWProfile_table_31_5_, DHWProfile_table_32_1_, DHWProfile_table_32_2_, DHWProfile_table_32_3_, DHWProfile_table_32_4_, DHWProfile_table_32_5_, DHWProfile_table_33_1_, DHWProfile_table_33_2_, DHWProfile_table_33_3_, DHWProfile_table_33_4_, DHWProfile_table_33_5_, DHWProfile_table_34_1_, DHWProfile_table_34_2_, DHWProfile_table_34_3_, DHWProfile_table_34_4_, DHWProfile_table_34_5_, DHWProfile_table_35_1_, DHWProfile_table_35_2_, DHWProfile_table_35_3_, DHWProfile_table_35_4_, DHWProfile_table_35_5_, DHWProfile_table_36_1_, DHWProfile_table_36_2_, DHWProfile_table_36_3_, DHWProfile_table_36_4_, DHWProfile_table_36_5_, DHWProfile_table_37_1_, DHWProfile_table_37_2_, DHWProfile_table_37_3_, DHWProfile_table_37_4_, DHWProfile_table_37_5_, DHWProfile_table_38_1_, DHWProfile_table_38_2_, DHWProfile_table_38_3_, DHWProfile_table_38_4_, DHWProfile_table_38_5_, DHWProfile_table_39_1_, DHWProfile_table_39_2_, DHWProfile_table_39_3_, DHWProfile_table_39_4_, DHWProfile_table_39_5_});
  fmi_Functions.fmiSetReal(fmi, {16777418, 16777419, 16777420, 16777421, 16777422, 16777423, 16777424, 16777425, 16777426, 16777427, 16777428, 16777429, 16777430, 16777431, 16777432, 16777433, 16777434, 16777435, 16777436, 16777437, 16777438, 16777439, 16777440, 16777441, 16777442, 16777443, 16777444, 16777445, 16777446, 16777447, 16777448, 16777449, 16777450, 16777451, 16777452, 16777453, 16777454, 16777455, 16777456, 16777457, 16777458, 16777459, 16777460, 16777461, 16777462, 16777463, 16777464, 16777465, 16777466, 16777467, 16777468, 16777469, 16777470, 16777471, 16777472, 16777473, 16777474, 16777475, 16777476, 16777477, 16777478, 16777479, 16777480, 16777481, 16777482, 16777483, 16777484, 16777485, 16777486, 16777487, 16777488, 16777489, 16777490, 16777491, 16777492, 16777493, 16777494, 16777495, 16777496, 16777497, 16777498, 16777499, 16777500, 16777501, 16777502, 16777503, 16777504, 16777505, 16777506, 16777507, 16777508, 16777509, 16777510, 16777511, 16777512, 16777513, 16777514, 16777515, 16777516, 16777517}, {DHWProfile_table_40_1_, DHWProfile_table_40_2_, DHWProfile_table_40_3_, DHWProfile_table_40_4_, DHWProfile_table_40_5_, DHWProfile_table_41_1_, DHWProfile_table_41_2_, DHWProfile_table_41_3_, DHWProfile_table_41_4_, DHWProfile_table_41_5_, DHWProfile_table_42_1_, DHWProfile_table_42_2_, DHWProfile_table_42_3_, DHWProfile_table_42_4_, DHWProfile_table_42_5_, DHWProfile_table_43_1_, DHWProfile_table_43_2_, DHWProfile_table_43_3_, DHWProfile_table_43_4_, DHWProfile_table_43_5_, DHWProfile_table_44_1_, DHWProfile_table_44_2_, DHWProfile_table_44_3_, DHWProfile_table_44_4_, DHWProfile_table_44_5_, DHWProfile_table_45_1_, DHWProfile_table_45_2_, DHWProfile_table_45_3_, DHWProfile_table_45_4_, DHWProfile_table_45_5_, DHWProfile_table_46_1_, DHWProfile_table_46_2_, DHWProfile_table_46_3_, DHWProfile_table_46_4_, DHWProfile_table_46_5_, DHWProfile_table_47_1_, DHWProfile_table_47_2_, DHWProfile_table_47_3_, DHWProfile_table_47_4_, DHWProfile_table_47_5_, DHWProfile_table_48_1_, DHWProfile_table_48_2_, DHWProfile_table_48_3_, DHWProfile_table_48_4_, DHWProfile_table_48_5_, DHWProfile_table_49_1_, DHWProfile_table_49_2_, DHWProfile_table_49_3_, DHWProfile_table_49_4_, DHWProfile_table_49_5_, DHWProfile_table_50_1_, DHWProfile_table_50_2_, DHWProfile_table_50_3_, DHWProfile_table_50_4_, DHWProfile_table_50_5_, DHWProfile_table_51_1_, DHWProfile_table_51_2_, DHWProfile_table_51_3_, DHWProfile_table_51_4_, DHWProfile_table_51_5_, DHWProfile_table_52_1_, DHWProfile_table_52_2_, DHWProfile_table_52_3_, DHWProfile_table_52_4_, DHWProfile_table_52_5_, DHWProfile_table_53_1_, DHWProfile_table_53_2_, DHWProfile_table_53_3_, DHWProfile_table_53_4_, DHWProfile_table_53_5_, DHWProfile_table_54_1_, DHWProfile_table_54_2_, DHWProfile_table_54_3_, DHWProfile_table_54_4_, DHWProfile_table_54_5_, DHWProfile_table_55_1_, DHWProfile_table_55_2_, DHWProfile_table_55_3_, DHWProfile_table_55_4_, DHWProfile_table_55_5_, DHWProfile_table_56_1_, DHWProfile_table_56_2_, DHWProfile_table_56_3_, DHWProfile_table_56_4_, DHWProfile_table_56_5_, DHWProfile_table_57_1_, DHWProfile_table_57_2_, DHWProfile_table_57_3_, DHWProfile_table_57_4_, DHWProfile_table_57_5_, DHWProfile_table_58_1_, DHWProfile_table_58_2_, DHWProfile_table_58_3_, DHWProfile_table_58_4_, DHWProfile_table_58_5_, DHWProfile_table_59_1_, DHWProfile_table_59_2_, DHWProfile_table_59_3_, DHWProfile_table_59_4_, DHWProfile_table_59_5_});
  fmi_Functions.fmiSetReal(fmi, {16777518, 16777519, 16777520, 16777521, 16777522, 16777523, 16777524, 16777525, 16777526, 16777527, 16777528, 16777529, 16777530, 16777531, 16777532, 16777533, 16777534, 16777535, 16777536, 16777537, 16777538, 16777539, 16777540, 16777541, 16777542, 16777543, 16777544, 16777545, 16777546, 16777547, 16777548, 16777549, 16777550, 16777551, 16777552, 16777553, 16777554, 16777555, 16777556, 16777557, 16777558, 16777559, 16777560, 16777561, 16777562, 16777563, 16777564, 16777565, 16777566, 16777567, 16777568, 16777569, 16777570, 16777571, 16777572, 16777573, 16777574, 16777575, 16777576, 16777577, 16777578, 16777579, 16777580, 16777581, 16777582, 16777583, 16777584, 16777585, 16777586, 16777587, 16777588, 16777589, 16777590, 16777591, 16777592, 16777593, 16777594, 16777595, 16777596, 16777597, 16777598, 16777599, 16777600, 16777601, 16777602, 16777603, 16777604, 16777605, 16777606, 16777607, 16777608, 16777609, 16777610, 16777611, 16777612, 16777613, 16777614, 16777615, 16777616, 16777617}, {DHWProfile_table_60_1_, DHWProfile_table_60_2_, DHWProfile_table_60_3_, DHWProfile_table_60_4_, DHWProfile_table_60_5_, DHWProfile_table_61_1_, DHWProfile_table_61_2_, DHWProfile_table_61_3_, DHWProfile_table_61_4_, DHWProfile_table_61_5_, DHWProfile_table_62_1_, DHWProfile_table_62_2_, DHWProfile_table_62_3_, DHWProfile_table_62_4_, DHWProfile_table_62_5_, DHWProfile_table_63_1_, DHWProfile_table_63_2_, DHWProfile_table_63_3_, DHWProfile_table_63_4_, DHWProfile_table_63_5_, DHWProfile_table_64_1_, DHWProfile_table_64_2_, DHWProfile_table_64_3_, DHWProfile_table_64_4_, DHWProfile_table_64_5_, DHWProfile_table_65_1_, DHWProfile_table_65_2_, DHWProfile_table_65_3_, DHWProfile_table_65_4_, DHWProfile_table_65_5_, DHWProfile_table_66_1_, DHWProfile_table_66_2_, DHWProfile_table_66_3_, DHWProfile_table_66_4_, DHWProfile_table_66_5_, DHWProfile_table_67_1_, DHWProfile_table_67_2_, DHWProfile_table_67_3_, DHWProfile_table_67_4_, DHWProfile_table_67_5_, DHWProfile_table_68_1_, DHWProfile_table_68_2_, DHWProfile_table_68_3_, DHWProfile_table_68_4_, DHWProfile_table_68_5_, DHWProfile_table_69_1_, DHWProfile_table_69_2_, DHWProfile_table_69_3_, DHWProfile_table_69_4_, DHWProfile_table_69_5_, DHWProfile_table_70_1_, DHWProfile_table_70_2_, DHWProfile_table_70_3_, DHWProfile_table_70_4_, DHWProfile_table_70_5_, DHWProfile_table_71_1_, DHWProfile_table_71_2_, DHWProfile_table_71_3_, DHWProfile_table_71_4_, DHWProfile_table_71_5_, DHWProfile_table_72_1_, DHWProfile_table_72_2_, DHWProfile_table_72_3_, DHWProfile_table_72_4_, DHWProfile_table_72_5_, DHWProfile_table_73_1_, DHWProfile_table_73_2_, DHWProfile_table_73_3_, DHWProfile_table_73_4_, DHWProfile_table_73_5_, DHWProfile_table_74_1_, DHWProfile_table_74_2_, DHWProfile_table_74_3_, DHWProfile_table_74_4_, DHWProfile_table_74_5_, DHWProfile_table_75_1_, DHWProfile_table_75_2_, DHWProfile_table_75_3_, DHWProfile_table_75_4_, DHWProfile_table_75_5_, DHWProfile_table_76_1_, DHWProfile_table_76_2_, DHWProfile_table_76_3_, DHWProfile_table_76_4_, DHWProfile_table_76_5_, DHWProfile_table_77_1_, DHWProfile_table_77_2_, DHWProfile_table_77_3_, DHWProfile_table_77_4_, DHWProfile_table_77_5_, DHWProfile_table_78_1_, DHWProfile_table_78_2_, DHWProfile_table_78_3_, DHWProfile_table_78_4_, DHWProfile_table_78_5_, DHWProfile_table_79_1_, DHWProfile_table_79_2_, DHWProfile_table_79_3_, DHWProfile_table_79_4_, DHWProfile_table_79_5_});
  fmi_Functions.fmiSetReal(fmi, {16777618, 16777619, 16777620, 16777621, 16777622, 16777623, 16777624, 16777625, 16777626, 16777627, 16777628, 16777629, 16777630, 16777631, 16777632, 16777633, 16777634, 16777635, 16777636, 16777637, 16777638, 16777639, 16777640, 16777641, 16777642, 16777643, 16777644, 16777645, 16777646, 16777647, 16777648, 16777649, 16777650, 16777651, 16777652, 16777653, 16777654, 16777655, 16777656, 16777657, 16777658, 16777659, 16777660, 16777661, 16777662, 16777663, 16777664, 16777665, 16777666, 16777667, 16777668, 16777669, 16777670, 16777671, 16777672, 16777673, 16777674, 16777675, 16777676, 16777677, 16777678, 16777679, 16777680, 16777681, 16777682, 16777683, 16777684, 16777685, 16777686, 16777687, 16777688, 16777689, 16777690, 16777691, 16777692, 16777693, 16777694, 16777695, 16777696, 16777697, 16777698, 16777699, 16777700, 16777701, 16777702, 16777703, 16777704, 16777705, 16777706, 16777707, 16777708, 16777709, 16777710, 16777711, 16777712, 16777713, 16777714, 16777715, 16777716, 16777717}, {DHWProfile_table_80_1_, DHWProfile_table_80_2_, DHWProfile_table_80_3_, DHWProfile_table_80_4_, DHWProfile_table_80_5_, DHWProfile_table_81_1_, DHWProfile_table_81_2_, DHWProfile_table_81_3_, DHWProfile_table_81_4_, DHWProfile_table_81_5_, DHWProfile_table_82_1_, DHWProfile_table_82_2_, DHWProfile_table_82_3_, DHWProfile_table_82_4_, DHWProfile_table_82_5_, DHWProfile_table_83_1_, DHWProfile_table_83_2_, DHWProfile_table_83_3_, DHWProfile_table_83_4_, DHWProfile_table_83_5_, DHWProfile_table_84_1_, DHWProfile_table_84_2_, DHWProfile_table_84_3_, DHWProfile_table_84_4_, DHWProfile_table_84_5_, DHWProfile_table_85_1_, DHWProfile_table_85_2_, DHWProfile_table_85_3_, DHWProfile_table_85_4_, DHWProfile_table_85_5_, DHWProfile_table_86_1_, DHWProfile_table_86_2_, DHWProfile_table_86_3_, DHWProfile_table_86_4_, DHWProfile_table_86_5_, DHWProfile_table_87_1_, DHWProfile_table_87_2_, DHWProfile_table_87_3_, DHWProfile_table_87_4_, DHWProfile_table_87_5_, DHWProfile_table_88_1_, DHWProfile_table_88_2_, DHWProfile_table_88_3_, DHWProfile_table_88_4_, DHWProfile_table_88_5_, DHWProfile_table_89_1_, DHWProfile_table_89_2_, DHWProfile_table_89_3_, DHWProfile_table_89_4_, DHWProfile_table_89_5_, DHWProfile_table_90_1_, DHWProfile_table_90_2_, DHWProfile_table_90_3_, DHWProfile_table_90_4_, DHWProfile_table_90_5_, DHWProfile_table_91_1_, DHWProfile_table_91_2_, DHWProfile_table_91_3_, DHWProfile_table_91_4_, DHWProfile_table_91_5_, DHWProfile_table_92_1_, DHWProfile_table_92_2_, DHWProfile_table_92_3_, DHWProfile_table_92_4_, DHWProfile_table_92_5_, DHWProfile_table_93_1_, DHWProfile_table_93_2_, DHWProfile_table_93_3_, DHWProfile_table_93_4_, DHWProfile_table_93_5_, DHWProfile_table_94_1_, DHWProfile_table_94_2_, DHWProfile_table_94_3_, DHWProfile_table_94_4_, DHWProfile_table_94_5_, DHWProfile_QDHW_flow_nominal, soc_BAT_Init, T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_supply_UFH_Init, T_return_UFH_Init, T_thermalCapacity_top_Init, T_thermalCapacity_down_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, T_Win_Init, t_TES_Init, t_DHW_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_HE_DHW_1_Init, T_HE_DHW_2_Init, T_HE_DHW_3_Init, T_HE_DHW_4_Init});
  fmi_Functions.fmiSetReal(fmi, {16777718, 16777719, 16777720, 16777721, 16777722, 16777723, 16777724, 16777725, 16777730, 16777732, 16777733, 16777734, 16777735, 16777736, 16777737, 16777738}, {T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, T_HE_TES_1_Init, T_HE_TES_2_Init, T_HE_TES_3_Init, T_HE_TES_4_Init, TSetDHW, price_el, price_comfort_vio, feed_in_revenue_el, eta_COP, Q_HP_max, P_HR_max, eta_HR});
  fmi_Functions.fmiSetInteger(fmi, {16777221, 16777726, 16777727, 16777728, 16777729, 16777731}, {year, nBat, n_mod, IdentifierPV, IdentifierBAT, tariff});
  fmi_Functions.fmiSetInteger(fmi, {16777222}, Integer({DHWtapping}));
    fmi_Functions.fmiSetReal(fmi, {352321536}, {_PV_Distr_FeedIn_start});
    fmi_Functions.fmiSetReal(fmi, {352321537}, {_PV_Distr_ChBat_start});
    fmi_Functions.fmiSetReal(fmi, {352321538}, {_PV_Distr_Use_start});
    fmi_Functions.fmiSetReal(fmi, {352321539}, {_power_use_BAT_start});
    fmi_Functions.fmiSetReal(fmi, {352321540}, {_power_to_grid_BAT_start});
    fmi_Functions.fmiSetReal(fmi, {352321541}, {_ch_BAT_start});
    fmi_Functions.fmiSetReal(fmi, {352321542}, {_dem_elec_start});
    fmi_Functions.fmiSetReal(fmi, {352321543}, {_dem_e_mob_start});
    fmi_Functions.fmiSetReal(fmi, {352321544}, {_dem_dhw_m_flow_start});
    fmi_Functions.fmiSetReal(fmi, {352321545}, {_dem_dhw_T_start});
    fmi_Functions.fmiSetReal(fmi, {352321546}, {_x_HP_heat_start});
    fmi_Functions.fmiSetReal(fmi, {352321547}, {_x_HP_cool_start});
    fmi_Functions.fmiSetReal(fmi, {352321548}, {_T_supply_UFH_start});
    fmi_Functions.fmiSetReal(fmi, {352321549}, {_T_supply_HP_heat_start});
    fmi_Functions.fmiSetReal(fmi, {352321550}, {_T_supply_cool_start});
    fmi_Functions.fmiSetReal(fmi, {352321551}, {_heat_rod_start});
    fmi_Functions.fmiSetReal(fmi, {352321552}, {_ts_gains_human_start});
    fmi_Functions.fmiSetReal(fmi, {352321553}, {_ts_gains_dev_start});
    fmi_Functions.fmiSetReal(fmi, {352321554}, {_ts_gains_light_start});
    fmi_Functions.fmiSetReal(fmi, {352321555}, {_ch_DHW_start});
    fmi_Functions.fmiSetReal(fmi, {352321556}, {_ch_TES_start});
    fmi_Functions.fmiSetReal(fmi, {352321557}, {_x_HP_on_start});
    fmi_Functions.fmiSetReal(fmi, {352321558}, {_dch_TES_start});
    fmi_Functions.fmiSetReal(fmi, {352321559}, {_t_TES_start});
    fmi_Functions.fmiSetReal(fmi, {352321560}, {_t_DHW_start});
    fmi_Functions.fmiSetReal(fmi, {352321561}, {_ts_T_inside_max_start});
    fmi_Functions.fmiSetReal(fmi, {352321562}, {_ts_T_inside_min_start});
    fmi_Functions.fmiSetReal(fmi, {352321563}, {_ts_T_air_start});
    fmi_Functions.fmiSetReal(fmi, {352321564}, {_ts_sol_rad_start});
    fmi_Functions.fmiSetReal(fmi, {352321565}, {_ts_win_spe_start});
    fmi_Functions.fmiSetReal(fmi, {352321566}, {_ts_price_el_start});
    fmi_Functions.fmiEnterSlaveInitializationMode(fmi, fmi_rTol, fmi_StartTime, fmi_forceShutDownAtStopTime, fmi_StopTime, 1);
  fmi_rdum := 1;
  fmi_idum := 1;
  myTimeStart :=time;
algorithm
assert(fmi_CommunicationStepSize > 0.0,"The parameter fmi_CommunicationStepSize has an invalid value, please set a positive value larger than 0.0");
  when {initial(), sample(fmi_StartTime, fmi_CommunicationStepSize)} then
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321536}, {_PV_Distr_FeedIn_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321536}, {pre(PV_Distr_FeedIn)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321536}, {PV_Distr_FeedIn});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321537}, {_PV_Distr_ChBat_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321537}, {pre(PV_Distr_ChBat)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321537}, {PV_Distr_ChBat});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321538}, {_PV_Distr_Use_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321538}, {pre(PV_Distr_Use)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321538}, {PV_Distr_Use});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321539}, {_power_use_BAT_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321539}, {pre(power_use_BAT)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321539}, {power_use_BAT});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321540}, {_power_to_grid_BAT_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321540}, {pre(power_to_grid_BAT)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321540}, {power_to_grid_BAT});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321541}, {_ch_BAT_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321541}, {pre(ch_BAT)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321541}, {ch_BAT});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321542}, {_dem_elec_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321542}, {pre(dem_elec)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321542}, {dem_elec});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321543}, {_dem_e_mob_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321543}, {pre(dem_e_mob)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321543}, {dem_e_mob});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321544}, {_dem_dhw_m_flow_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321544}, {pre(dem_dhw_m_flow)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321544}, {dem_dhw_m_flow});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321545}, {_dem_dhw_T_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321545}, {pre(dem_dhw_T)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321545}, {dem_dhw_T});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321546}, {_x_HP_heat_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321546}, {pre(x_HP_heat)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321546}, {x_HP_heat});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321547}, {_x_HP_cool_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321547}, {pre(x_HP_cool)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321547}, {x_HP_cool});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321548}, {_T_supply_UFH_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321548}, {pre(T_supply_UFH)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321548}, {T_supply_UFH});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321549}, {_T_supply_HP_heat_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321549}, {pre(T_supply_HP_heat)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321549}, {T_supply_HP_heat});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321550}, {_T_supply_cool_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321550}, {pre(T_supply_cool)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321550}, {T_supply_cool});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321551}, {_heat_rod_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321551}, {pre(heat_rod)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321551}, {heat_rod});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321552}, {_ts_gains_human_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321552}, {pre(ts_gains_human)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321552}, {ts_gains_human});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321553}, {_ts_gains_dev_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321553}, {pre(ts_gains_dev)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321553}, {ts_gains_dev});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321554}, {_ts_gains_light_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321554}, {pre(ts_gains_light)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321554}, {ts_gains_light});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321555}, {_ch_DHW_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321555}, {pre(ch_DHW)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321555}, {ch_DHW});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321556}, {_ch_TES_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321556}, {pre(ch_TES)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321556}, {ch_TES});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321557}, {_x_HP_on_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321557}, {pre(x_HP_on)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321557}, {x_HP_on});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321558}, {_dch_TES_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321558}, {pre(dch_TES)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321558}, {dch_TES});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321559}, {_t_TES_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321559}, {pre(t_TES)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321559}, {t_TES});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321560}, {_t_DHW_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321560}, {pre(t_DHW)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321560}, {t_DHW});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321561}, {_ts_T_inside_max_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321561}, {pre(ts_T_inside_max)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321561}, {ts_T_inside_max});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321562}, {_ts_T_inside_min_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321562}, {pre(ts_T_inside_min)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321562}, {ts_T_inside_min});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321563}, {_ts_T_air_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321563}, {pre(ts_T_air)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321563}, {ts_T_air});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321564}, {_ts_sol_rad_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321564}, {pre(ts_sol_rad)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321564}, {ts_sol_rad});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321565}, {_ts_win_spe_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321565}, {pre(ts_win_spe)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321565}, {ts_win_spe});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321566}, {_ts_price_el_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321566}, {pre(ts_price_el)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321566}, {ts_price_el});
      end if;
    end if;
      if fmi_rdum >= 0  and fmi_idum >= 0 and not fmi_exitInit and not initial() then
        fmi_Functions.fmiExitSlaveInitializationMode(fmi, 1);
        fmi_exitInit:=true;
      end if;
    if time>=fmi_CommunicationStepSize +fmi_StartTime then
      for stepSizeIndex in 1:stepSizeScaleFactor loop
        fmi_StepOK :=fmi_Functions.fmiDoStep(
          fmi,
          time + (stepSizeIndex - 1 - stepSizeScaleFactor)*
            fmi_CommunicationStepSize/stepSizeScaleFactor,
          fmi_CommunicationStepSize/stepSizeScaleFactor,
          1);
      end for;
      fmi_flip :=not pre(fmi_flip);
    end if;
    if not initial() then
      internal.outputs_outputsDist_t_DHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544320);
      internal.outputs_outputsDist_t_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544321);
      internal.outputs_outputsDist_ch_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544322);
      internal.outputs_outputsDist_dch_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544323);
      internal.outputs_outputsDist_ch_DHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544324);
      internal.outputs_outputsDist_dch_DHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544325);
      internal.outputs_outputsDist_T_DHW_4 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544326);
      internal.outputs_outputsDist_T_DHW_3 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544327);
      internal.outputs_outputsDist_T_DHW_2 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544328);
      internal.outputs_outputsDist_T_DHW_1 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544329);
      internal.outputs_outputsDist_T_TES_4 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544330);
      internal.outputs_outputsDist_T_TES_3 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544331);
      internal.outputs_outputsDist_T_TES_2 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544332);
      internal.outputs_outputsDist_T_TES_1 :=fmi_Functions.fmiGetRealScalar(fmi,
        335544333);
      internal.outputs_outputsDist_T_HE_DHW_4 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544334);
      internal.outputs_outputsDist_T_HE_DHW_3 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544335);
      internal.outputs_outputsDist_T_HE_DHW_2 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544336);
      internal.outputs_outputsDist_T_HE_DHW_1 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544337);
      internal.outputs_outputsDist_T_HE_TES_4 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544338);
      internal.outputs_outputsDist_T_HE_TES_3 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544339);
      internal.outputs_outputsDist_T_HE_TES_2 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544340);
      internal.outputs_outputsDist_T_HE_TES_1 :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544341);
      internal.outputs_outputsGen_x_HP_on :=fmi_Functions.fmiGetRealScalar(fmi,
        335544342);
      internal.outputs_outputsGen_power_HP :=fmi_Functions.fmiGetRealScalar(fmi,
        335544343);
      internal.outputs_outputsGen_heat_rod :=fmi_Functions.fmiGetRealScalar(fmi,
        335544344);
      internal.outputs_outputsGen_power_rod :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544345);
      internal.outputs_outputsGen_T_supply_HP_heat :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544346);
      internal.outputs_outputsGen_T_supply_HP :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544347);
      internal.outputs_outputsGen_T_supply :=fmi_Functions.fmiGetRealScalar(fmi,
        335544348);
      internal.outputs_outputsGen_T_supply_heat :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544349);
      internal.outputs_outputsGen_T_return_heat :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544350);
      internal.outputs_outputsGen_T_return :=fmi_Functions.fmiGetRealScalar(fmi,
        335544351);
      internal.outputs_outputsGen_heat_HP :=fmi_Functions.fmiGetRealScalar(fmi,
        335544352);
      internal.outputs_outputsDem_T_Air :=fmi_Functions.fmiGetRealScalar(fmi,
        335544353);
      internal.outputs_outputsDem_t_rad :=fmi_Functions.fmiGetRealScalar(fmi,
        335544354);
      internal.outputs_outputsDem_dT_vio :=fmi_Functions.fmiGetRealScalar(fmi,
        335544355);
      internal.outputs_outputsDem_T_Win :=fmi_Functions.fmiGetRealScalar(fmi,
        335544356);
      internal.outputs_outputsDem_T_ExtWall :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544357);
      internal.outputs_outputsDem_T_IntWall :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544358);
      internal.outputs_outputsDem_T_Floor :=fmi_Functions.fmiGetRealScalar(fmi,
        335544359);
      internal.outputs_outputsDem_T_Roof :=fmi_Functions.fmiGetRealScalar(fmi,
        335544360);
      internal.outputs_outputsDem_QDHW_flow :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544361);
      internal.outputs_outputsDem_QIntGains_flow_1_ :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544362);
      internal.outputs_outputsTra_T_supply_UFH :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544363);
      internal.outputs_outputsTra_T_return_UFH :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544364);
      internal.outputs_outputsTra_Q_conv_UFH :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544365);
      internal.outputs_outputsTra_Q_rad_UFH :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544366);
      internal.outputs_outputsTra_T_panel_heating1 :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544367);
      internal.outputs_outputsTra_T_thermalCapacity_top :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544368);
      internal.outputs_outputsTra_T_thermalCapacity_down :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544369);
      internal.outputs_outputsTra_mFlow_1_ :=fmi_Functions.fmiGetRealScalar(fmi,
        335544370);
      internal.outputs_outputsTra_TZone_1_ :=fmi_Functions.fmiGetRealScalar(fmi,
        335544371);
      internal.outputs_outputsElec_ts_power_PV :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544372);
      internal.outputs_outputsElec_power_use_PV :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544373);
      internal.outputs_outputsElec_power_to_grid_PV :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544374);
      internal.outputs_outputsElec_power_to_BAT_PV :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544375);
      internal.outputs_outputsElec_power_use_BAT :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544376);
      internal.outputs_outputsElec_power_to_grid_BAT :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544377);
      internal.outputs_outputsElec_power_to_BAT_from_grid :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544378);
      internal.outputs_outputsElec_ch_BAT :=fmi_Functions.fmiGetRealScalar(fmi,
        335544379);
      internal.outputs_outputsElec_dch_BAT :=fmi_Functions.fmiGetRealScalar(fmi,
        335544380);
      internal.outputs_outputsElec_soc_BAT :=fmi_Functions.fmiGetRealScalar(fmi,
        335544381);
      internal.outputs_outputsElec_power_to_grid :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544382);
      internal.outputs_outputsElec_power_from_grid :=
        fmi_Functions.fmiGetRealScalar(fmi, 335544383);
      internal.outputs_outputsElec_res_elec :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544384);
      internal.outputs_outputsElec_power_PV :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544385);
      internal.MPC_Interface_m_flowDHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544386);
      internal.MPC_Interface_TDemandDHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544387);
      internal.MPC_Interface_intGains_1_ :=fmi_Functions.fmiGetRealScalar(fmi,
        335544388);
      internal.MPC_Interface_intGains_2_ :=fmi_Functions.fmiGetRealScalar(fmi,
        335544389);
      internal.MPC_Interface_intGains_3_ :=fmi_Functions.fmiGetRealScalar(fmi,
        335544390);
      internal.MPC_Interface_TSoil :=fmi_Functions.fmiGetRealScalar(fmi,
        67108935);
      internal.MPC_Interface_ElectricityDemand :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544392);
      internal.MPC_Interface_EVDemand :=fmi_Functions.fmiGetRealScalar(fmi,
        335544393);
      internal.MPC_Interface_weaBus_HDifHor :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544394);
      internal.MPC_Interface_weaBus_HDirNor :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544395);
      internal.MPC_Interface_weaBus_HGloHor :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544396);
      internal.MPC_Interface_weaBus_HHorIR :=fmi_Functions.fmiGetRealScalar(fmi,
        335544397);
      internal.MPC_Interface_weaBus_TBlaSky :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544398);
      internal.MPC_Interface_weaBus_TDewPoi :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544399);
      internal.MPC_Interface_weaBus_TDryBul :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544400);
      internal.MPC_Interface_weaBus_TWetBul :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544401);
      internal.MPC_Interface_weaBus_ceiHei :=fmi_Functions.fmiGetRealScalar(fmi,
        335544402);
      internal.MPC_Interface_weaBus_cloTim :=fmi_Functions.fmiGetRealScalar(fmi,
        335544403);
      internal.MPC_Interface_weaBus_lat :=fmi_Functions.fmiGetRealScalar(fmi,
        67108948);
      internal.MPC_Interface_weaBus_lon :=fmi_Functions.fmiGetRealScalar(fmi,
        67108949);
      internal.MPC_Interface_weaBus_nOpa :=fmi_Functions.fmiGetRealScalar(fmi,
        335544406);
      internal.MPC_Interface_weaBus_nTot :=fmi_Functions.fmiGetRealScalar(fmi,
        335544407);
      internal.MPC_Interface_weaBus_pAtm :=fmi_Functions.fmiGetRealScalar(fmi,
        67108952);
      internal.MPC_Interface_weaBus_relHum :=fmi_Functions.fmiGetRealScalar(fmi,
        335544409);
      internal.MPC_Interface_weaBus_solAlt :=fmi_Functions.fmiGetRealScalar(fmi,
        335544410);
      internal.MPC_Interface_weaBus_solDec :=fmi_Functions.fmiGetRealScalar(fmi,
        335544411);
      internal.MPC_Interface_weaBus_solHouAng :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544412);
      internal.MPC_Interface_weaBus_solTim :=fmi_Functions.fmiGetRealScalar(fmi,
        335544413);
      internal.MPC_Interface_weaBus_solZen :=fmi_Functions.fmiGetRealScalar(fmi,
        335544414);
      internal.MPC_Interface_weaBus_winDir :=fmi_Functions.fmiGetRealScalar(fmi,
        335544415);
      internal.MPC_Interface_weaBus_winSpe :=fmi_Functions.fmiGetRealScalar(fmi,
        335544416);
      internal.MPC_Interface_T_supply_UFH :=fmi_Functions.fmiGetRealScalar(fmi,
        335544417);
      internal.MPC_Interface_ts_T_inside_max :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544418);
      internal.MPC_Interface_ts_T_inside_min :=fmi_Functions.fmiGetRealScalar(
        fmi, 335544419);
      internal.MPC_Interface_HP_on :=fmi_Functions.fmiGetRealScalar(fmi,
        335544420);
      internal.MPC_Interface_hr_rel :=fmi_Functions.fmiGetRealScalar(fmi,
        335544421);
      internal.MPC_Interface_ch_DHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544422);
      internal.MPC_Interface_ch_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544423);
      internal.MPC_Interface_mode_HP :=fmi_Functions.fmiGetBooleanScalar(fmi,
        335544424);
      internal.MPC_Interface_dch_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544425);
      internal.MPC_Interface_t_DHW :=fmi_Functions.fmiGetRealScalar(fmi,
        335544426);
      internal.MPC_Interface_t_TES :=fmi_Functions.fmiGetRealScalar(fmi,
        335544427);
      internal.MPC_Interface_T_supply_HP :=fmi_Functions.fmiGetRealScalar(fmi,
        335544428);
      internal.costs_tot :=fmi_Functions.fmiGetRealScalar(fmi, 335544429);
      internal.costs_vio :=fmi_Functions.fmiGetRealScalar(fmi, 335544430);
      internal.costs_elec :=fmi_Functions.fmiGetRealScalar(fmi, 335544431);
      internal.rev_elec :=fmi_Functions.fmiGetRealScalar(fmi, 335544432);
      internal.costs_DHW_err :=fmi_Functions.fmiGetRealScalar(fmi, 335544433);
      internal.CPUtime :=fmi_Functions.fmiGetRealScalar(fmi, 67108978);
      internal.EventCounter :=fmi_Functions.fmiGetRealScalar(fmi, 67108979);
    end if;
  end when;
  when {pre(fmi_flip), not pre(fmi_flip)} then
    _PV_Distr_FeedIn_old := pre(PV_Distr_FeedIn);
    _PV_Distr_ChBat_old := pre(PV_Distr_ChBat);
    _PV_Distr_Use_old := pre(PV_Distr_Use);
    _power_use_BAT_old := pre(power_use_BAT);
    _power_to_grid_BAT_old := pre(power_to_grid_BAT);
    _ch_BAT_old := pre(ch_BAT);
    _dem_elec_old := pre(dem_elec);
    _dem_e_mob_old := pre(dem_e_mob);
    _dem_dhw_m_flow_old := pre(dem_dhw_m_flow);
    _dem_dhw_T_old := pre(dem_dhw_T);
    _x_HP_heat_old := pre(x_HP_heat);
    _x_HP_cool_old := pre(x_HP_cool);
    _T_supply_UFH_old := pre(T_supply_UFH);
    _T_supply_HP_heat_old := pre(T_supply_HP_heat);
    _T_supply_cool_old := pre(T_supply_cool);
    _heat_rod_old := pre(heat_rod);
    _ts_gains_human_old := pre(ts_gains_human);
    _ts_gains_dev_old := pre(ts_gains_dev);
    _ts_gains_light_old := pre(ts_gains_light);
    _ch_DHW_old := pre(ch_DHW);
    _ch_TES_old := pre(ch_TES);
    _x_HP_on_old := pre(x_HP_on);
    _dch_TES_old := pre(dch_TES);
    _t_TES_old := pre(t_TES);
    _t_DHW_old := pre(t_DHW);
    _ts_T_inside_max_old := pre(ts_T_inside_max);
    _ts_T_inside_min_old := pre(ts_T_inside_min);
    _ts_T_air_old := pre(ts_T_air);
    _ts_sol_rad_old := pre(ts_sol_rad);
    _ts_win_spe_old := pre(ts_win_spe);
    _ts_price_el_old := pre(ts_price_el);
  end when;
equation
  if initial() then
    outputs_outputsDist_t_DHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777711, 16777712, 16777713}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544320});
  else
    outputs_outputsDist_t_DHW = internal.outputs_outputsDist_t_DHW;
  end if;
  if initial() then
    outputs_outputsDist_t_TES = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777718, 16777719, 16777720, 16777721}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544321});
  else
    outputs_outputsDist_t_TES = internal.outputs_outputsDist_t_TES;
  end if;
  if initial() then
    outputs_outputsDist_ch_TES = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, T_HE_TES_1_Init, T_HE_TES_4_Init, P_HR_max, heat_rod, ch_DHW, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777722, 16777725, 16777737, 352321551, 352321555, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544322});
  else
    outputs_outputsDist_ch_TES = internal.outputs_outputsDist_ch_TES;
  end if;
  if initial() then
    outputs_outputsDist_dch_TES = fmi_Functions.GetRealVariable(fmi,myTimeStart, {t_TES_Init, dch_TES}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777708, 352321558}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544323});
  else
    outputs_outputsDist_dch_TES = internal.outputs_outputsDist_dch_TES;
  end if;
  if initial() then
    outputs_outputsDist_ch_DHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_HE_DHW_1_Init, T_HE_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, heat_rod, ch_DHW, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777711, 16777712, 16777713, 16777714, 16777717, 16777718, 16777719, 16777720, 16777721, 16777737, 352321551, 352321555, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544324});
  else
    outputs_outputsDist_ch_DHW = internal.outputs_outputsDist_ch_DHW;
  end if;
  if initial() then
    outputs_outputsDist_dch_DHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_4_Init, dem_dhw_m_flow, dem_dhw_T}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777713, 352321544, 352321545}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544325});
  else
    outputs_outputsDist_dch_DHW = internal.outputs_outputsDist_dch_DHW;
  end if;
  if initial() then
    outputs_outputsDist_T_DHW_4 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777713}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544326});
  else
    outputs_outputsDist_T_DHW_4 = internal.outputs_outputsDist_T_DHW_4;
  end if;
  if initial() then
    outputs_outputsDist_T_DHW_3 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_3_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777712}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544327});
  else
    outputs_outputsDist_T_DHW_3 = internal.outputs_outputsDist_T_DHW_3;
  end if;
  if initial() then
    outputs_outputsDist_T_DHW_2 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_2_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777711}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544328});
  else
    outputs_outputsDist_T_DHW_2 = internal.outputs_outputsDist_T_DHW_2;
  end if;
  if initial() then
    outputs_outputsDist_T_DHW_1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544329});
  else
    outputs_outputsDist_T_DHW_1 = internal.outputs_outputsDist_T_DHW_1;
  end if;
  if initial() then
    outputs_outputsDist_T_TES_4 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_TES_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777721}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544330});
  else
    outputs_outputsDist_T_TES_4 = internal.outputs_outputsDist_T_TES_4;
  end if;
  if initial() then
    outputs_outputsDist_T_TES_3 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_TES_3_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777720}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544331});
  else
    outputs_outputsDist_T_TES_3 = internal.outputs_outputsDist_T_TES_3;
  end if;
  if initial() then
    outputs_outputsDist_T_TES_2 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_TES_2_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777719}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544332});
  else
    outputs_outputsDist_T_TES_2 = internal.outputs_outputsDist_T_TES_2;
  end if;
  if initial() then
    outputs_outputsDist_T_TES_1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_TES_1_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777718}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544333});
  else
    outputs_outputsDist_T_TES_1 = internal.outputs_outputsDist_T_TES_1;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_DHW_4 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_DHW_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777717}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544334});
  else
    outputs_outputsDist_T_HE_DHW_4 = internal.outputs_outputsDist_T_HE_DHW_4;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_DHW_3 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_DHW_3_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777716}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544335});
  else
    outputs_outputsDist_T_HE_DHW_3 = internal.outputs_outputsDist_T_HE_DHW_3;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_DHW_2 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_DHW_2_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777715}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544336});
  else
    outputs_outputsDist_T_HE_DHW_2 = internal.outputs_outputsDist_T_HE_DHW_2;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_DHW_1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_DHW_1_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777714}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544337});
  else
    outputs_outputsDist_T_HE_DHW_1 = internal.outputs_outputsDist_T_HE_DHW_1;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_TES_4 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_TES_4_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777725}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544338});
  else
    outputs_outputsDist_T_HE_TES_4 = internal.outputs_outputsDist_T_HE_TES_4;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_TES_3 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_TES_3_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777724}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544339});
  else
    outputs_outputsDist_T_HE_TES_3 = internal.outputs_outputsDist_T_HE_TES_3;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_TES_2 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_TES_2_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777723}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544340});
  else
    outputs_outputsDist_T_HE_TES_2 = internal.outputs_outputsDist_T_HE_TES_2;
  end if;
  if initial() then
    outputs_outputsDist_T_HE_TES_1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_HE_TES_1_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777722}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544341});
  else
    outputs_outputsDist_T_HE_TES_1 = internal.outputs_outputsDist_T_HE_TES_1;
  end if;
  if initial() then
    outputs_outputsGen_x_HP_on = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544342});
  else
    outputs_outputsGen_x_HP_on = internal.outputs_outputsGen_x_HP_on;
  end if;
  if initial() then
    outputs_outputsGen_power_HP = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544343});
  else
    outputs_outputsGen_power_HP = internal.outputs_outputsGen_power_HP;
  end if;
  if initial() then
    outputs_outputsGen_heat_rod = fmi_Functions.GetRealVariable(fmi,myTimeStart, {P_HR_max, heat_rod}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777737, 352321551}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544344});
  else
    outputs_outputsGen_heat_rod = internal.outputs_outputsGen_heat_rod;
  end if;
  if initial() then
    outputs_outputsGen_power_rod = fmi_Functions.GetRealVariable(fmi,myTimeStart, {P_HR_max, eta_HR, heat_rod}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777737, 16777738, 352321551}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544345});
  else
    outputs_outputsGen_power_rod = internal.outputs_outputsGen_power_rod;
  end if;
  if initial() then
    outputs_outputsGen_T_supply_HP_heat = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_Init, T_supply_HP_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777696, 16777697, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321551, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544346});
  else
    outputs_outputsGen_T_supply_HP_heat = internal.outputs_outputsGen_T_supply_HP_heat;
  end if;
  if initial() then
    outputs_outputsGen_T_supply_HP = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_Init, T_supply_HP_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777696, 16777697, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321551, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544347});
  else
    outputs_outputsGen_T_supply_HP = internal.outputs_outputsGen_T_supply_HP;
  end if;
  if initial() then
    outputs_outputsGen_T_supply = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777696}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544348});
  else
    outputs_outputsGen_T_supply = internal.outputs_outputsGen_T_supply;
  end if;
  if initial() then
    outputs_outputsGen_T_supply_heat = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777696}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544349});
  else
    outputs_outputsGen_T_supply_heat = internal.outputs_outputsGen_T_supply_heat;
  end if;
  if initial() then
    outputs_outputsGen_T_return_heat = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321551, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544350});
  else
    outputs_outputsGen_T_return_heat = internal.outputs_outputsGen_T_return_heat;
  end if;
  if initial() then
    outputs_outputsGen_T_return = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321551, 352321556, 352321557, 352321559, 352321560}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544351});
  else
    outputs_outputsGen_T_return = internal.outputs_outputsGen_T_return;
  end if;
  if initial() then
    outputs_outputsGen_heat_HP = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544352});
  else
    outputs_outputsGen_heat_HP = internal.outputs_outputsGen_heat_HP;
  end if;
  if initial() then
    outputs_outputsDem_T_Air = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544353});
  else
    outputs_outputsDem_T_Air = internal.outputs_outputsDem_T_Air;
  end if;
  if initial() then
    outputs_outputsDem_t_rad = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544354});
  else
    outputs_outputsDem_t_rad = internal.outputs_outputsDem_t_rad;
  end if;
  if initial() then
    outputs_outputsDem_dT_vio = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, ts_T_inside_max, ts_T_inside_min}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695, 352321561, 352321562}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544355});
  else
    outputs_outputsDem_dT_vio = internal.outputs_outputsDem_dT_vio;
  end if;
  if initial() then
    outputs_outputsDem_T_Win = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544356});
  else
    outputs_outputsDem_T_Win = internal.outputs_outputsDem_T_Win;
  end if;
  if initial() then
    outputs_outputsDem_T_ExtWall = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544357});
  else
    outputs_outputsDem_T_ExtWall = internal.outputs_outputsDem_T_ExtWall;
  end if;
  if initial() then
    outputs_outputsDem_T_IntWall = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544358});
  else
    outputs_outputsDem_T_IntWall = internal.outputs_outputsDem_T_IntWall;
  end if;
  if initial() then
    outputs_outputsDem_T_Floor = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544359});
  else
    outputs_outputsDem_T_Floor = internal.outputs_outputsDem_T_Floor;
  end if;
  if initial() then
    outputs_outputsDem_T_Roof = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544360});
  else
    outputs_outputsDem_T_Roof = internal.outputs_outputsDem_T_Roof;
  end if;
  if initial() then
    outputs_outputsDem_QDHW_flow = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_DHW_1_Init, T_DHW_4_Init, dem_dhw_m_flow, dem_dhw_T}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777710, 16777713, 352321544, 352321545}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544361});
  else
    outputs_outputsDem_QDHW_flow = internal.outputs_outputsDem_QDHW_flow;
  end if;
  if initial() then
    outputs_outputsDem_QIntGains_flow_1_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, ts_gains_human, ts_gains_dev, ts_gains_light}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695, 352321552, 352321553, 352321554}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544362});
  else
    outputs_outputsDem_QIntGains_flow_1_ = internal.outputs_outputsDem_QIntGains_flow_1_;
  end if;
  if initial() then
    outputs_outputsTra_T_supply_UFH = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_UFH_Init, dch_TES}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777699, 352321558}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544363});
  else
    outputs_outputsTra_T_supply_UFH = internal.outputs_outputsTra_T_supply_UFH;
  end if;
  if initial() then
    outputs_outputsTra_T_return_UFH = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dch_TES}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321558}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544364});
  else
    outputs_outputsTra_T_return_UFH = internal.outputs_outputsTra_T_return_UFH;
  end if;
  if initial() then
    outputs_outputsTra_Q_conv_UFH = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544365});
  else
    outputs_outputsTra_Q_conv_UFH = internal.outputs_outputsTra_Q_conv_UFH;
  end if;
  if initial() then
    outputs_outputsTra_Q_rad_UFH = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544366});
  else
    outputs_outputsTra_Q_rad_UFH = internal.outputs_outputsTra_Q_rad_UFH;
  end if;
  if initial() then
    outputs_outputsTra_T_panel_heating1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_thermalCapacity_top_Init, T_Roof_Init, T_IntWall_Init, T_ExtWall_Init, T_Floor_Init, ts_gains_human, ts_gains_dev, ts_gains_light, ts_T_air, ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {16777695, 16777701, 16777703, 16777704, 16777705, 16777706, 352321552, 352321553, 352321554, 352321563, 352321564}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544367});
  else
    outputs_outputsTra_T_panel_heating1 = internal.outputs_outputsTra_T_panel_heating1;
  end if;
  if initial() then
    outputs_outputsTra_T_thermalCapacity_top = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_thermalCapacity_top_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777701}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544368});
  else
    outputs_outputsTra_T_thermalCapacity_top = internal.outputs_outputsTra_T_thermalCapacity_top;
  end if;
  if initial() then
    outputs_outputsTra_T_thermalCapacity_down = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_thermalCapacity_down_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777702}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544369});
  else
    outputs_outputsTra_T_thermalCapacity_down = internal.outputs_outputsTra_T_thermalCapacity_down;
  end if;
  if initial() then
    outputs_outputsTra_mFlow_1_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dch_TES}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321558}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544370});
  else
    outputs_outputsTra_mFlow_1_ = internal.outputs_outputsTra_mFlow_1_;
  end if;
  if initial() then
    outputs_outputsTra_TZone_1_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544371});
  else
    outputs_outputsTra_TZone_1_ = internal.outputs_outputsTra_TZone_1_;
  end if;
  if initial() then
    outputs_outputsElec_ts_power_PV = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544372});
  else
    outputs_outputsElec_ts_power_PV = internal.outputs_outputsElec_ts_power_PV;
  end if;
  if initial() then
    outputs_outputsElec_power_use_PV = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, PV_Distr_Use, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 352321538, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544373});
  else
    outputs_outputsElec_power_use_PV = internal.outputs_outputsElec_power_use_PV;
  end if;
  if initial() then
    outputs_outputsElec_power_to_grid_PV = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, eta_HR, PV_Distr_FeedIn, PV_Distr_Use, dem_elec, dem_e_mob, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 16777738, 352321536, 352321538, 352321542, 352321543, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544374});
  else
    outputs_outputsElec_power_to_grid_PV = internal.outputs_outputsElec_power_to_grid_PV;
  end if;
  if initial() then
    outputs_outputsElec_power_to_BAT_PV = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, PV_Distr_ChBat, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 352321537, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544375});
  else
    outputs_outputsElec_power_to_BAT_PV = internal.outputs_outputsElec_power_to_BAT_PV;
  end if;
  if initial() then
    outputs_outputsElec_power_use_BAT = fmi_Functions.GetRealVariable(fmi,myTimeStart, {power_use_BAT}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321539}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544376});
  else
    outputs_outputsElec_power_use_BAT = internal.outputs_outputsElec_power_use_BAT;
  end if;
  if initial() then
    outputs_outputsElec_power_to_grid_BAT = fmi_Functions.GetRealVariable(fmi,myTimeStart, {power_to_grid_BAT}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321540}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544377});
  else
    outputs_outputsElec_power_to_grid_BAT = internal.outputs_outputsElec_power_to_grid_BAT;
  end if;
  if initial() then
    outputs_outputsElec_power_to_BAT_from_grid = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, soc_BAT_Init, PV_Distr_ChBat, power_use_BAT, power_to_grid_BAT, ch_BAT, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, nBat, n_mod, IdentifierPV, IdentifierBAT}, {16777216, 16777217, 16777218, 16777219, 16777220, 16777694, 352321537, 352321539, 352321540, 352321541, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777726, 16777727, 16777728, 16777729}, {335544378});
  else
    outputs_outputsElec_power_to_BAT_from_grid = internal.outputs_outputsElec_power_to_BAT_from_grid;
  end if;
  if initial() then
    outputs_outputsElec_ch_BAT = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ch_BAT}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321541}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544379});
  else
    outputs_outputsElec_ch_BAT = internal.outputs_outputsElec_ch_BAT;
  end if;
  if initial() then
    outputs_outputsElec_dch_BAT = fmi_Functions.GetRealVariable(fmi,myTimeStart, {power_use_BAT, power_to_grid_BAT}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321539, 352321540}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544380});
  else
    outputs_outputsElec_dch_BAT = internal.outputs_outputsElec_dch_BAT;
  end if;
  if initial() then
    outputs_outputsElec_soc_BAT = fmi_Functions.GetRealVariable(fmi,myTimeStart, {soc_BAT_Init}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {nBat, IdentifierBAT}, {16777694}, fill(0,0), fill(0,0), fill(0,0), {16777726, 16777729}, {335544381});
  else
    outputs_outputsElec_soc_BAT = internal.outputs_outputsElec_soc_BAT;
  end if;
  if initial() then
    outputs_outputsElec_power_to_grid = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, eta_HR, PV_Distr_FeedIn, PV_Distr_ChBat, PV_Distr_Use, power_use_BAT, power_to_grid_BAT, ch_BAT, dem_elec, dem_e_mob, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 16777738, 352321536, 352321537, 352321538, 352321539, 352321540, 352321541, 352321542, 352321543, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544382});
  else
    outputs_outputsElec_power_to_grid = internal.outputs_outputsElec_power_to_grid;
  end if;
  if initial() then
    outputs_outputsElec_power_from_grid = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, eta_HR, PV_Distr_Use, power_use_BAT, dem_elec, dem_e_mob, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 16777738, 352321538, 352321539, 352321542, 352321543, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544383});
  else
    outputs_outputsElec_power_from_grid = internal.outputs_outputsElec_power_from_grid;
  end if;
  if initial() then
    outputs_outputsElec_res_elec = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_Air_Init, T_supply_Init, T_supply_HP_Init, T_return_Init, T_DHW_1_Init, T_DHW_2_Init, T_DHW_3_Init, T_DHW_4_Init, T_TES_1_Init, T_TES_2_Init, T_TES_3_Init, T_TES_4_Init, P_HR_max, eta_HR, dem_elec, dem_e_mob, x_HP_heat, x_HP_cool, heat_rod, ch_TES, x_HP_on, t_TES, t_DHW, ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777695, 16777696, 16777697, 16777698, 16777710, 16777711, 16777712, 16777713, 16777718, 16777719, 16777720, 16777721, 16777737, 16777738, 352321542, 352321543, 352321546, 352321547, 352321551, 352321556, 352321557, 352321559, 352321560, 352321563}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544384});
  else
    outputs_outputsElec_res_elec = internal.outputs_outputsElec_res_elec;
  end if;
  if initial() then
    outputs_outputsElec_power_PV = fmi_Functions.GetRealVariable(fmi,myTimeStart, {til, azi1, azi2, lat, lon, ts_T_air, ts_sol_rad, ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year, n_mod, IdentifierPV}, {16777216, 16777217, 16777218, 16777219, 16777220, 352321563, 352321564, 352321565}, fill(0,0), fill(0,0), fill(0,0), {16777221, 16777727, 16777728}, {335544385});
  else
    outputs_outputsElec_power_PV = internal.outputs_outputsElec_power_PV;
  end if;
  if initial() then
    MPC_Interface_m_flowDHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dem_dhw_m_flow}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321544}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544386});
  else
    MPC_Interface_m_flowDHW = internal.MPC_Interface_m_flowDHW;
  end if;
  if initial() then
    MPC_Interface_TDemandDHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dem_dhw_T}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321545}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544387});
  else
    MPC_Interface_TDemandDHW = internal.MPC_Interface_TDemandDHW;
  end if;
  if initial() then
    MPC_Interface_intGains_1_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_gains_human}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321552}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544388});
  else
    MPC_Interface_intGains_1_ = internal.MPC_Interface_intGains_1_;
  end if;
  if initial() then
    MPC_Interface_intGains_2_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_gains_dev}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321553}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544389});
  else
    MPC_Interface_intGains_2_ = internal.MPC_Interface_intGains_2_;
  end if;
  if initial() then
    MPC_Interface_intGains_3_ = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_gains_light}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321554}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544390});
  else
    MPC_Interface_intGains_3_ = internal.MPC_Interface_intGains_3_;
  end if;
  if initial() then
    MPC_Interface_TSoil = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {67108935});
  else
    MPC_Interface_TSoil = internal.MPC_Interface_TSoil;
  end if;
  if initial() then
    MPC_Interface_ElectricityDemand = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dem_elec}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321542}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544392});
  else
    MPC_Interface_ElectricityDemand = internal.MPC_Interface_ElectricityDemand;
  end if;
  if initial() then
    MPC_Interface_EVDemand = fmi_Functions.GetRealVariable(fmi,myTimeStart, {dem_e_mob}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321543}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544393});
  else
    MPC_Interface_EVDemand = internal.MPC_Interface_EVDemand;
  end if;
  if initial() then
    MPC_Interface_weaBus_HDifHor = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544394});
  else
    MPC_Interface_weaBus_HDifHor = internal.MPC_Interface_weaBus_HDifHor;
  end if;
  if initial() then
    MPC_Interface_weaBus_HDirNor = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544395});
  else
    MPC_Interface_weaBus_HDirNor = internal.MPC_Interface_weaBus_HDirNor;
  end if;
  if initial() then
    MPC_Interface_weaBus_HGloHor = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_sol_rad}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321564}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544396});
  else
    MPC_Interface_weaBus_HGloHor = internal.MPC_Interface_weaBus_HGloHor;
  end if;
  if initial() then
    MPC_Interface_weaBus_HHorIR = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544397});
  else
    MPC_Interface_weaBus_HHorIR = internal.MPC_Interface_weaBus_HHorIR;
  end if;
  if initial() then
    MPC_Interface_weaBus_TBlaSky = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {352321563}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544398});
  else
    MPC_Interface_weaBus_TBlaSky = internal.MPC_Interface_weaBus_TBlaSky;
  end if;
  if initial() then
    MPC_Interface_weaBus_TDewPoi = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544399});
  else
    MPC_Interface_weaBus_TDewPoi = internal.MPC_Interface_weaBus_TDewPoi;
  end if;
  if initial() then
    MPC_Interface_weaBus_TDryBul = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321563}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544400});
  else
    MPC_Interface_weaBus_TDryBul = internal.MPC_Interface_weaBus_TDryBul;
  end if;
  if initial() then
    MPC_Interface_weaBus_TWetBul = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_T_air}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, {352321563}, fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544401});
  else
    MPC_Interface_weaBus_TWetBul = internal.MPC_Interface_weaBus_TWetBul;
  end if;
  if initial() then
    MPC_Interface_weaBus_ceiHei = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544402});
  else
    MPC_Interface_weaBus_ceiHei = internal.MPC_Interface_weaBus_ceiHei;
  end if;
  if initial() then
    MPC_Interface_weaBus_cloTim = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544403});
  else
    MPC_Interface_weaBus_cloTim = internal.MPC_Interface_weaBus_cloTim;
  end if;
  if initial() then
    MPC_Interface_weaBus_lat = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {67108948});
  else
    MPC_Interface_weaBus_lat = internal.MPC_Interface_weaBus_lat;
  end if;
  if initial() then
    MPC_Interface_weaBus_lon = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {67108949});
  else
    MPC_Interface_weaBus_lon = internal.MPC_Interface_weaBus_lon;
  end if;
  if initial() then
    MPC_Interface_weaBus_nOpa = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544406});
  else
    MPC_Interface_weaBus_nOpa = internal.MPC_Interface_weaBus_nOpa;
  end if;
  if initial() then
    MPC_Interface_weaBus_nTot = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544407});
  else
    MPC_Interface_weaBus_nTot = internal.MPC_Interface_weaBus_nTot;
  end if;
  if initial() then
    MPC_Interface_weaBus_pAtm = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {67108952});
  else
    MPC_Interface_weaBus_pAtm = internal.MPC_Interface_weaBus_pAtm;
  end if;
  if initial() then
    MPC_Interface_weaBus_relHum = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544409});
  else
    MPC_Interface_weaBus_relHum = internal.MPC_Interface_weaBus_relHum;
  end if;
  if initial() then
    MPC_Interface_weaBus_solAlt = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544410});
  else
    MPC_Interface_weaBus_solAlt = internal.MPC_Interface_weaBus_solAlt;
  end if;
  if initial() then
    MPC_Interface_weaBus_solDec = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544411});
  else
    MPC_Interface_weaBus_solDec = internal.MPC_Interface_weaBus_solDec;
  end if;
  if initial() then
    MPC_Interface_weaBus_solHouAng = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544412});
  else
    MPC_Interface_weaBus_solHouAng = internal.MPC_Interface_weaBus_solHouAng;
  end if;
  if initial() then
    MPC_Interface_weaBus_solTim = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544413});
  else
    MPC_Interface_weaBus_solTim = internal.MPC_Interface_weaBus_solTim;
  end if;
  if initial() then
    MPC_Interface_weaBus_solZen = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544414});
  else
    MPC_Interface_weaBus_solZen = internal.MPC_Interface_weaBus_solZen;
  end if;
  if initial() then
    MPC_Interface_weaBus_winDir = fmi_Functions.GetRealVariable(fmi,myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), {year}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {16777221}, {335544415});
  else
    MPC_Interface_weaBus_winDir = internal.MPC_Interface_weaBus_winDir;
  end if;
  if initial() then
    MPC_Interface_weaBus_winSpe = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_win_spe}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321565}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544416});
  else
    MPC_Interface_weaBus_winSpe = internal.MPC_Interface_weaBus_winSpe;
  end if;
  if initial() then
    MPC_Interface_T_supply_UFH = fmi_Functions.GetRealVariable(fmi,myTimeStart, {T_supply_UFH}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321548}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544417});
  else
    MPC_Interface_T_supply_UFH = internal.MPC_Interface_T_supply_UFH;
  end if;
  if initial() then
    MPC_Interface_ts_T_inside_max = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_T_inside_max}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321561}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544418});
  else
    MPC_Interface_ts_T_inside_max = internal.MPC_Interface_ts_T_inside_max;
  end if;
  if initial() then
    MPC_Interface_ts_T_inside_min = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ts_T_inside_min}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321562}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544419});
  else
    MPC_Interface_ts_T_inside_min = internal.MPC_Interface_ts_T_inside_min;
  end if;
  if initial() then
    MPC_Interface_HP_on = fmi_Functions.GetRealVariable(fmi,myTimeStart, {x_HP_on}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321557}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544420});
  else
    MPC_Interface_HP_on = internal.MPC_Interface_HP_on;
  end if;
  if initial() then
    MPC_Interface_hr_rel = fmi_Functions.GetRealVariable(fmi,myTimeStart, {P_HR_max, heat_rod}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777737, 352321551}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544421});
  else
    MPC_Interface_hr_rel = internal.MPC_Interface_hr_rel;
  end if;
  if initial() then
    MPC_Interface_ch_DHW = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ch_DHW}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321555}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544422});
  else
    MPC_Interface_ch_DHW = internal.MPC_Interface_ch_DHW;
  end if;
  if initial() then
    MPC_Interface_ch_TES = fmi_Functions.GetRealVariable(fmi,myTimeStart, {ch_TES}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321556}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544423});
  else
    MPC_Interface_ch_TES = internal.MPC_Interface_ch_TES;
  end if;
algorithm
  if initial() then
    fmi_Functions.fmiSetReal(fmi, {352321546, 352321547}, {x_HP_heat, x_HP_cool});
    MPC_Interface_mode_HP := fmi_Functions.fmiGetBooleanScalar(fmi, 335544424);
  else
    MPC_Interface_mode_HP :=internal.MPC_Interface_mode_HP;
  end if;
  if initial() then
    MPC_Interface_dch_TES :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      {dch_TES},
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      {352321558},
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544425});
  else
    MPC_Interface_dch_TES :=internal.MPC_Interface_dch_TES;
  end if;
  if initial() then
    MPC_Interface_t_DHW :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      {t_DHW},
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      {352321560},
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544426});
  else
    MPC_Interface_t_DHW :=internal.MPC_Interface_t_DHW;
  end if;
  if initial() then
    MPC_Interface_t_TES :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      {t_TES},
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      {352321559},
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544427});
  else
    MPC_Interface_t_TES :=internal.MPC_Interface_t_TES;
  end if;
  if initial() then
    MPC_Interface_T_supply_HP :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      {x_HP_heat,x_HP_cool,T_supply_HP_heat,T_supply_cool},
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      {352321546,352321547,352321549,352321550},
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544428});
  else
    MPC_Interface_T_supply_HP :=internal.MPC_Interface_T_supply_HP;
  end if;
  if initial() then
    costs_tot :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544429});
  else
    costs_tot :=internal.costs_tot;
  end if;
  if initial() then
    costs_vio :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544430});
  else
    costs_vio :=internal.costs_vio;
  end if;
  if initial() then
    costs_elec :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544431});
  else
    costs_elec :=internal.costs_elec;
  end if;
  if initial() then
    rev_elec :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544432});
  else
    rev_elec :=internal.rev_elec;
  end if;
  if initial() then
    costs_DHW_err :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {335544433});
  else
    costs_DHW_err :=internal.costs_DHW_err;
  end if;
  if initial() then
    CPUtime :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {67108978});
  else
    CPUtime :=internal.CPUtime;
  end if;
  if initial() then
    EventCounter :=fmi_Functions.GetRealVariable(
      fmi,
      myTimeStart,
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      fill(0.0, 0),
      zeroOffset,
      fill(false, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      fill(0, 0),
      {67108979});
  else
    EventCounter :=internal.EventCounter;
  end if;
  annotation (__Dymola_FMUImportVersion="Dymola 2021", __Dymola_FMUImportPath="D:/MA/master-thesis/MPC_Einfamilienhaus/FMUs/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH.fmu", __Dymola_FMUImportIncludeAllVariables="false", __Dymola_FMUImportIntegrate="false", experiment(StartTime=0.0, StopTime=86400.0, Tolerance=1E-07),
    Icon(graphics={
      Rectangle(
        extent={{-100,100},{100,-100}},
        lineColor={95,95,95},
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid,
        lineThickness=0.5),
      Bitmap(extent={{-95,-95},{95,95}},
      fileName="modelica://MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box/Resources/Library/FMU/MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH/model.png"),
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Rectangle(
        extent={{-126,22},{-74,-22}},
        lineColor={0,0,127},
        radius=4,
        fillColor={240,240,240},
        fillPattern=FillPattern.Solid),
      Rectangle(
        extent={{126,22},{74,-22}},
        lineColor={0,0,127},
        radius=4,
        fillColor={240,240,240},
        fillPattern=FillPattern.Solid),
      Rectangle(
        extent={{126,-38},{74,-82}},
        lineColor={255,0,255},
        radius=4,
        fillColor={240,240,240},
        fillPattern=FillPattern.Solid),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 2.0 CS")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 2.0</li>
<li>modelName = MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH</li>
<li>generationTool = Dymola Version 2021 (64-bit), 2020-04-17 (using Dassl with tolerance 1e-07)</li>
<li>generationDateAndTime = 2022-04-01T10:30:34Z</li>
</ul>
<p><br><b>Co-Simulation Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>canHandleVariableCommunicationStepSize = true</li>
<li>canInterpolateInputs = true</li>
<li>maxOutputDerivativeOrder = 1</li>
<li>canRunAsynchronuously = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = true</li>
<li>canNotUseMemoryManagementFunctions = true</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
</html>"));
end MA_0Pell_0SingleFamilyHouse_FMUs_SFH_0FMU_0UFH_fmu_black_box;
